@using Banko.Client.Services.User
@inject UserStateService UserState
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@implements IDisposable

<MudDrawer @bind-Open="@Open" Elevation="1" Variant="@DrawerVariant.Persistent" Color="Color.Surface">
  <MudDrawerHeader>
    <MudText Typo="Typo.h6">Banko</MudText>
  </MudDrawerHeader>
  <MudNavMenu>
    <MudNavLink Match="NavLinkMatch.All" Href="">Home</MudNavLink>

    <MudNavLink Href="counter">Counter</MudNavLink>
    <MudNavLink Href="weather">Weather</MudNavLink>
    @if (UserState.IsAuthenticated)
    {
      <MudNavLink @onclick="HandleLogout">Logout</MudNavLink>
    }
    else
    {
      <MudNavLink Href="login">Login</MudNavLink>
    }
  </MudNavMenu>
</MudDrawer>

@code {
  [Parameter]
  public bool Open { get; set; }
  [Parameter]
  public EventCallback<bool> OpenChanged { get; set; }
  private bool isLoading = false;
  protected override async Task OnInitializedAsync()
  {
    UserState.OnAuthStateChanged += StateHasChanged;
    await UserState.InitializeAuthenticationStateAsync();
    await InvokeAsync(StateHasChanged);
  }
  private async Task HandleLogout()
  {
    isLoading = true;
    try
    {
      await UserState.LogoutAsync();
      await InvokeAsync(StateHasChanged);
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Error during logout: {ex.Message}");
      Snackbar.Add($"Error during logout: {ex.Message}", Severity.Error);
    }
    finally
    {
      isLoading = false;
      NavigationManager.NavigateTo("/");
    }
  }

  public void Dispose()
  {
    UserState.OnAuthStateChanged -= StateHasChanged;
  }
}