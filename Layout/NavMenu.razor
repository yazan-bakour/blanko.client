@using Banko.Client.Services.User
@using Banko.Client.Services
@inject UserStateService UserState
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@implements IDisposable

<MudDrawer @bind-Open="@Open" Elevation="1" Variant="@DrawerVariant.Persistent">
  <MudDrawerHeader Class="justify-space-between">
    <MudText Typo="Typo.h6" Color="UserState.IsAuthenticated? Color.Success: Color.Error">Banko</MudText>
  </MudDrawerHeader>
  <MudNavMenu>
    <MudNavLink Match="NavLinkMatch.All" Href="">Homes</MudNavLink>
    @if (UserState.IsAuthenticated)
    {
      <MudNavLink Href="profile">Profile</MudNavLink>
      <MudNavLink Href="account">Account</MudNavLink>
      <MudNavLink Href="dashboard">Dashboard</MudNavLink>
      <MudNavLink Href="funds">Funds</MudNavLink>
      <MudNavLink Href="transactions">Transactions</MudNavLink>
      <MudNavLink @onclick="HandleLogout">Logout</MudNavLink>
    }
    else
    {
      <MudNavLink Href="login">Login</MudNavLink>
      <MudNavLink Href="register">Register</MudNavLink>
    }
  </MudNavMenu>
</MudDrawer>

@code {
  [Parameter]
  public bool Open { get; set; }
  [Parameter]
  public EventCallback<bool> OpenChanged { get; set; }
  protected override async Task OnInitializedAsync()
  {
    UserState.OnAuthStateChanged += StateHasChanged;
    await UserState.InitializeAuthenticationStateAsync();
    await InvokeAsync(StateHasChanged);
  }
  private async Task HandleLogout()
  {
    LoadingService.IsLoading = true;
    try
    {
      await UserState.LogoutAsync();
      await InvokeAsync(StateHasChanged);
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Error during logout: {ex.Message}");
      Snackbar.Add($"Error during logout: {ex.Message}", Severity.Error);
    }
    finally
    {
      LoadingService.IsLoading = false;
      NavigationManager.NavigateTo("/");
    }
  }

  public void Dispose()
  {
    UserState.OnAuthStateChanged -= StateHasChanged;
  }
}