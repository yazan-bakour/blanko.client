@using Banko.Client.Models
@using Banko.Client.Services.Auth
@using Banko.Client.Services.User
@using Banko.Client.Services

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject IAuthService AuthService

<MudDrawer @bind-Open="@Open" Class="navmenu-override-primary-hover" Overlay="false" Breakpoint="@Breakpoint.Md"
  Elevation="0" Variant="@DrawerVariant.Responsive">
  <MudDrawerHeader Class="justify-space-between pa-0 align-center">
    <AuthorizeView>
      <Authorized>
        @if (IsProfileRoute())
        {
          <MudItem Class="d-flex align-center">
            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Primary" Size="Size.Medium" Class="mr-2"
              OnClick="@(() => NavigationManager.NavigateTo("/"))" aria-label="Close profile and return to dashboard" />
            <MudText Typo="Typo.h5" Color="Color.Primary">Settings</MudText>
          </MudItem>
        }
        else
        {
          <MudText Class="pl-4" Typo="Typo.h5" Color="Color.Primary"><b>Banko</b></MudText>
        }
      </Authorized>
      <NotAuthorized>
        @if (!NavigationManager.Uri.EndsWith("login", StringComparison.OrdinalIgnoreCase) &&
                !NavigationManager.Uri.EndsWith("register", StringComparison.OrdinalIgnoreCase))
        {
          NavigationManager.NavigateTo("/login", true);
        }
        <MudText Class="pl-7" Typo="Typo.h5" Color="Color.Primary"><b>Banko</b></MudText>
      </NotAuthorized>
    </AuthorizeView>
  </MudDrawerHeader>
  <MudNavMenu>
    <AuthorizeView>
      <Authorized>
        @{
          var userId = context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
          var userName = context.User.Identity?.Name ?? "User";
        }
        @if (IsProfileRoute())
        {
          <!-- Profile-specific navigation items -->
          <MudNavLink Class="@GetActiveClass()" Icon="@Icons.Material.Outlined.PermIdentity" Href="profile"
            Match="NavLinkMatch.All">
            Account</MudNavLink>
          <MudNavLink Icon="@Icons.Material.Outlined.PrivacyTip" Href="profile/privacy">
            Privacy</MudNavLink>
          @* <MudNavLink Icon="@Icons.Material.Outlined.EditNotifications" Href="profile/notification">Notification
          </MudNavLink> *@
          <MudNavLink Icon="@Icons.Material.Outlined.Palette" Href="profile/appearance">
            Appearance</MudNavLink>
        }
        else
        {
          <!-- Default navigation items -->
          <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home" Href="/">Home</MudNavLink>
          <MudNavLink Icon="@Icons.Material.Filled.Dashboard" Href="dashboard">Dashboard</MudNavLink>
          <MudNavLink Icon="@Icons.Material.Filled.AccountBalance" Href=@($"account/{userId}")>Account</MudNavLink>
          <MudNavLink Icon="@Icons.Material.Filled.Receipt" Href="transactions">Transactions</MudNavLink>
          @* <MudNavLink Href="funds">Funds</MudNavLink> *@
          @* <MudNavLink @onclick="() => HandleLogout()">Logout</MudNavLink> *@
        }
      </Authorized>
      <NotAuthorized>
        <MudNavLink Href="login">Login</MudNavLink>
        <MudNavLink Href="register">Register</MudNavLink>
      </NotAuthorized>
    </AuthorizeView>
  </MudNavMenu>
</MudDrawer>

@code {
  [Parameter]
  public bool Open { get; set; }
  [Parameter]
  public EventCallback<bool> OpenChanged { get; set; }

  private async Task HandleLogout()
  {
    await AuthService.LogoutAsync();
    await OpenChanged.InvokeAsync(false);
  }
  private bool IsProfileRoute()
  {
    var currentUri = NavigationManager.Uri;
    return currentUri.EndsWith("/profile") || currentUri.Contains("/profile/");
  }

  private string GetActiveClass()
  {
    var currentUri = NavigationManager.Uri;
    return currentUri.Contains("/profile/account") ? "active" : string.Empty;
  }
}
<style scoped>
  .navmenu-override-primary-hover {
    --mud-palette-primary-hover: rgba(9, 47, 82, 1) !important;
  }
</style>
