@using Banko.Client.Models
@using Banko.Client.Services.Auth
@using Banko.Client.Services.User
@using Banko.Client.Services

@inject UserStateService UserState
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject IAuthService AuthService
@implements IDisposable

<MudDrawer @bind-Open="@Open" Elevation="1" Variant="@DrawerVariant.Persistent">
  <MudDrawerHeader Class="justify-space-between">
    <MudText Typo="Typo.h6" Color="IsAuthenticated? Color.Success: Color.Error">Banko</MudText>
  </MudDrawerHeader>
  <MudNavMenu>
    <MudNavLink Match="NavLinkMatch.All" Href="">Homes</MudNavLink>
    @if (IsAuthenticated)
    {
      <MudNavLink Href="profile">Profile</MudNavLink>
      <MudNavLink Href=@($"account/{CurrentUser?.User.Id}")>Account</MudNavLink>
      <MudNavLink Href="dashboard">Dashboard</MudNavLink>
      <MudNavLink Href="funds">Funds</MudNavLink>
      <MudNavLink Href="transactions">Transactions</MudNavLink>
      <MudNavLink @onclick="HandleLogout">Logout</MudNavLink>
    }
    else
    {
      <MudNavLink Href="login">Login</MudNavLink>
      <MudNavLink Href="register">Register</MudNavLink>
    }
  </MudNavMenu>
</MudDrawer>

@code {
  [Parameter]
  public bool Open { get; set; }
  [Parameter]
  public EventCallback<bool> OpenChanged { get; set; }
  private bool IsAuthenticated;
  private UserRead? CurrentUser;

  protected override async Task OnInitializedAsync()
  {
    AuthService.OnAuthStateChanged += AuthStateChanged;
    CurrentUser = await AuthService.GetCurrentUserAsync();
    IsAuthenticated = await AuthService.IsAuthenticatedAsync();
  }
  private async void AuthStateChanged()
  {
    CurrentUser = await AuthService.GetCurrentUserAsync();
    IsAuthenticated = await AuthService.IsAuthenticatedAsync();
    await InvokeAsync(StateHasChanged);
  }

  private async Task HandleLogout()
  {
    LoadingService.IsLoading = true;

    try
    {
      await AuthService.LogoutAsync();
      await OpenChanged.InvokeAsync(false);
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error during logout: {ex.Message}", Severity.Error);
    }
    finally
    {
      LoadingService.IsLoading = false;
      NavigationManager.NavigateTo("/", forceLoad: true);
    }
  }

  public void Dispose()
  {
    AuthService.OnAuthStateChanged -= AuthStateChanged;
  }
}
}