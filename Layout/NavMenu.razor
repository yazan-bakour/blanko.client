@using Banko.Client.Services.User
@inject UserStateService UserState
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
  <div class="container-fluid">
    <a class="navbar-brand" href="">Banko.Client</a>
    <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
      <span class="navbar-toggler-icon"></span>
    </button>
  </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
  <nav class="nav flex-column">
    <div class="nav-item px-3">
      <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
        <i class="bi bi-house-door" aria-hidden="true"></i> Home
      </NavLink>
    </div>
    <div class="nav-item px-3">
      <NavLink class="nav-link" href="counter">
        <i class=" bi bi-plus-square" aria-hidden="true"></i> Counter
      </NavLink>
    </div>
    <div class="nav-item px-3">
      <NavLink class="nav-link" href="weather">
        <i class="bi bi-list" aria-hidden="true"></i> Weather
      </NavLink>
    </div>
    <div class="nav-item px-3">
      @if (UserState.IsAuthenticated)
      {
        <NavLink class="nav-link" @onclick="HandleLogout">
          <i class="bi bi-box-arrow-right pe-auto" aria-hidden="true"></i> Logout
        </NavLink>
      }
      else
      {
        <NavLink class="nav-link" href="/login">
          <i class="bi bi-box-arrow-in-left" aria-hidden="true"></i> Login
        </NavLink>
      }
    </div>
  </nav>
</div>

@code {
  private bool collapseNavMenu = true;
  private bool isLoading = false;

  protected override void OnInitialized()
  {
    UserState.OnAuthStateChanged += StateHasChanged;
  }

  private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

  private void ToggleNavMenu()
  {
    collapseNavMenu = !collapseNavMenu;
  }

  private async Task HandleLogout()
  {
    isLoading = true;
    try
    {
      await UserState.LogoutAsync();
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Error during logout: {ex.Message}");
    }
    finally
    {
      isLoading = false;
      NavigationManager.NavigateTo("/");
    }
  }

  public void Dispose()
  {
    UserState.OnAuthStateChanged -= StateHasChanged;
  }
}