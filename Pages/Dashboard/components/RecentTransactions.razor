@using Banko.Client.Models.Transaction
@using Banko.Client.Helper

<MudPaper Class="pa-4 rounded-lg mud-height-full" Elevation="0">
  <MudStack Row AlignItems="AlignItems.Center" Class="mb-2">
    <MudIcon Icon="@Icons.Material.Filled.History" />
    <MudText Typo="Typo.h6" Class="mr-2">Recent Transactions</MudText>
  </MudStack>

  @if (transactions?.Length > 0)
  {
    <MudTable Items="@transactions.OrderByDescending(t => t.TransactionDate).Take(5)" Hover="false"
      Breakpoint="Breakpoint.LgAndDown" Elevation="0" Dense="true">
      <HeaderContent>
        <MudTh>Description</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Amount</MudTh>
      </HeaderContent>
      <RowTemplate>
        <MudTd DataLabel="Description">
          <MudText Typo="Typo.body2">@context.Description</MudText>
          <MudText Typo="Typo.caption">@context.TransactionTypeName</MudText>
        </MudTd>
        <MudTd DataLabel="Date">@context.TransactionDate.ToLocalTime().ToString("MMM dd, yyyy")</MudTd>
        <MudTd DataLabel="Amount">
          <MudText Color="@(context.Type == TransactionType.Deposit ? Color.Success : Color.Error)">
            @(GetTransactionPrefix(context))@CurrencyFormatter.FormatCurrency(context.Amount)
          </MudText>
        </MudTd>
      </RowTemplate>
    </MudTable>
  }
  else
  {
    <MudAlert Severity="Severity.Info" Class="mt-3">No transaction history</MudAlert>
  }
</MudPaper>

@code {
  [Parameter] public TransactionRead[]? transactions { get; set; }
  private string GetTransactionPrefix(TransactionRead transaction)
  {
    return transaction.Type == TransactionType.Deposit ||
    transaction.Type == TransactionType.Refund ?
    "+" : "";
  }
}