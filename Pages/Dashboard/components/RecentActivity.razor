@using Banko.Client.Models.Transaction
@using Banko.Client.Helper

<MudPaper Class="pa-4 rounded-lg mud-height-full" Elevation="0">

  <MudStack Row AlignItems="AlignItems.Center" Class="mb-2">
    <MudIcon Icon="@Icons.Material.Filled.Sync" />
    <MudText Typo="Typo.h6" Class="mr-2">Recent Activity</MudText>
  </MudStack>

  @if (transactions?.Length > 0)
  {

    <MudItem xs="12" Class="d-flex align-baseline">
      <MudText Typo="Typo.h5" Class="mr-2">@transactions.Length</MudText>
      <MudText Typo="Typo.body2">Total Accounts</MudText>
    </MudItem>

    <MudDivider Class="my-4" />

    <MudText Typo="Typo.body2">Latest Transaction:</MudText>
    var latestTransaction = transactions.OrderByDescending(t => t.TransactionDate).FirstOrDefault();
    if (latestTransaction != null)
    {
      <MudText Typo="Typo.subtitle2">@latestTransaction.Description</MudText>
      <MudText Typo="Typo.caption">@latestTransaction.TransactionDate.ToLocalTime().ToString("MMM dd, HH:mm")
      </MudText>
      <MudText Color="@(latestTransaction.Type == TransactionType.Deposit ? Color.Success : Color.Error)" Typo="Typo.body2">
        @(GetTransactionPrefix(latestTransaction))@CurrencyFormatter.FormatCurrency(latestTransaction.Amount)
      </MudText>
    }
  }
  else
  {
    <MudAlert Severity="Severity.Info" Class="mt-3">No transaction history</MudAlert>
  }
</MudPaper>

@code {
  [Parameter] public TransactionRead[]? transactions { get; set; }

  private string GetTransactionPrefix(TransactionRead transaction)
  {
    return transaction.Type == TransactionType.Deposit ||
    transaction.Type == TransactionType.Refund ?
    "+" : "";
  }
}