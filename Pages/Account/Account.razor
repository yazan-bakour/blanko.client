@page "/account/{UserId:int}"

@using Banko.Client.Models.Account
@using Banko.Client.Services
@using Banko.Client.Services.Account

@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject AccountStateService AccountState
@inject IDialogService DialogService

@attribute [Authorize]
@implements IDisposable

<PageTitle>Account</PageTitle>

@if (LoadingService.IsLoading)
{
  <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (!accounts?.Any() ?? true)
{
  <MudItem xs="12" Class="d-flex justify-content-end mb-3">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Label="Create New Account"
      OnClick="() => OpenCreateDialog()" />
  </MudItem>
  <MudAlert Severity="Severity.Info" Class="mt-4">No accounts found for this user. Click 'Create New Account' to add one.
  </MudAlert>
}

else
{
  <MudItem xs="12" Class="d-flex justify-content-end mb-3">
    <MudSpacer />
    <MudFab StartIcon="@Icons.Material.Filled.Add" Label="Create" OnClick="() => OpenCreateDialog()" />
  </MudItem>

  <MudExpansionPanels MultiExpansion="true">
    @foreach (var account in accounts!)
    {
      <MudExpansionPanel Text="@account.AccountNumber">

        <ChildContent>
          <MudGrid Class="justify-space-between">
            <MudItem xs="12" md="5">
              <MudList T="string" Dense="true">
                <MudListItem Icon="@Icons.Material.Filled.Numbers">ID: @account.Id</MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.AccountBalance">Number: @account.AccountNumber</MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.Payment">Balance: @account.Balance.ToString("C2")</MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.Category">Type: @account.Type</MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.Stream">Status: <MudChip Label="true"
                    Color="@GetStatusColor(account.Status)" Size="Size.Small">@account.Status</MudChip>
                </MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.MonetizationOn">Currency: @account.Currency</MudListItem>
              </MudList>
            </MudItem>
            <MudItem xs="12" md="5">
              <MudList T="string" Dense="true">
                <MudListItem Icon="@Icons.Material.Filled.Percent">Interest: @account.InterestRate.ToString("P2")
                </MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.ArrowDownward">Min Balance: @account.MinimumBalance.ToString("C2")
                </MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.CreditScore">Overdraft: @account.OverdraftLimit.ToString("C2")
                </MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.CalendarToday">Created:
                  @account.CreatedAt.ToLocalTime().ToString("g")</MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.Update">Updated: @account.UpdatedAt.ToLocalTime().ToString("g")
                </MudListItem>
                <MudListItem Icon="@Icons.Material.Filled.History">Last Transaction:
                  @(account.LastTransactionDate?.ToLocalTime().ToString("g") ?? "N/A")</MudListItem>
              </MudList>
            </MudItem>
            @if (!string.IsNullOrWhiteSpace(account.Description))
            {
              <MudItem xs="12">
                <MudText Typo="Typo.subtitle2">Description</MudText>
                <MudText Typo="Typo.body2">@account.Description</MudText>
              </MudItem>
            }
            <MudItem xs="12" Class="d-flex justify-end mt-4">
              <MudButton StartIcon="@Icons.Material.Filled.Payment" Color="Color.Primary"
                OnClick="@(() => HandleTransaction(account))">
                New Transaction
              </MudButton>
            </MudItem>
          </MudGrid>
        </ChildContent>
      </MudExpansionPanel>
    }
  </MudExpansionPanels>
}

@code {
  [Parameter]
  public int UserId { get; set; }
  private AccountRead[]? accounts => AccountState.CurrentAccounts;

  private async Task OpenCreateDialog()
  {
    var parameters = new DialogParameters<CreateAccountDialog> { { x => x.UserId, UserId } };
    var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };

    var dialog = await DialogService.ShowAsync<CreateAccountDialog>("Create New Account", parameters, options);
    var result = await dialog.Result;

    if (result!.Canceled && result.Data is AccountCreate model)
    {
      LoadingService.IsLoading = true;
      StateHasChanged();
      try
      {
        await AccountState.CreateAccount(model);
        Snackbar.Add("Account created successfully!", Severity.Success);
      }
      catch (Exception ex)
      {
        Snackbar.Add($"Error creating account: {ex.Message}", Severity.Error);
      }
      finally
      {
        LoadingService.IsLoading = false;
        StateHasChanged();
      }
    }
  }

  protected override void OnInitialized()
  {
    AccountState.OnAccountStateChanged += HandleStateChange;
  }
  protected override async Task OnParametersSetAsync()
  {
    await LoadAccountDataAsync();
  }
  private async Task LoadAccountDataAsync()
  {
    LoadingService.IsLoading = true;
    try
    {
      await AccountState.InitializeAccountStateAsync(UserId);
      if (accounts?.Any() == true)
      {
        Snackbar.Add($"Found {accounts.Length} account(s)", Severity.Success);
      }
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error loading accounts: {ex.Message}", Severity.Error);
    }
    finally
    {
      LoadingService.IsLoading = false;
      StateHasChanged();
    }
  }
  private void HandleStateChange()
  {
    InvokeAsync(StateHasChanged);
  }
  public void Dispose()
  {
    AccountState.OnAccountStateChanged -= HandleStateChange;
  }

  private void HandleTransaction(AccountRead account)
  {
    // TODO: Implement transaction handling
    Snackbar.Add("Transaction feature coming soon!", Severity.Info);
  }

  private Color GetAccountTypeColor(AccountType type) => type switch
  {
    AccountType.Checking => Color.Primary,
    AccountType.Savings => Color.Success,
    AccountType.Investment => Color.Warning,
    AccountType.Business => Color.Info,
    _ => Color.Default
  };

  private Color GetStatusColor(AccountStatus status) => status switch
  {
    AccountStatus.Active => Color.Success,
    AccountStatus.Inactive => Color.Warning,
    AccountStatus.Frozen => Color.Error,
    AccountStatus.Closed => Color.Dark,
    AccountStatus.PendingApproval => Color.Info,
    _ => Color.Default
  };
}
