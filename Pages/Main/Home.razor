@page "/"
@using Banko.Client.Models.Account
@using Banko.Client.Models.Transaction
@using Banko.Client.Models.User
@using Banko.Client.Services
@using Banko.Client.Services.Account
@using Banko.Client.Services.User
@using Banko.Client.Services.Transaction
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web
@using Banko.Client.Pages.Main
@using Banko.Client.Pages.Account
@using Banko.Client.Components
@using Banko.Client.Helper
@using Banko.Client.State

@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject TransactionStateService TransactionState
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject AccountComposable AccountComposable
@inject TransactionsComposable TransactionsComposable
@inject UserStateService UserState
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

@attribute [Authorize]
<PageTitle>Home</PageTitle>

<OpenDialog @ref="dialog" />
<MudItem Class="relative overflow-hidden mud-drawer-container">

  <!--Drawer Content-->
  <MudDrawerContainer Class="mud-height-full">
    <MudDrawer Class="mud-drawer-account" @bind-Open="@_open" Anchor="Anchor.Right" Elevation="0"
      Variant="@DrawerVariant.Persistent">
      <MudDrawerHeader Class="d-flex align-center pa-0 height-0 min-height-0">
        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Primary" OnClick="@ToggleDrawer"
          aria-label="Toggle drawer" Size="Size.Medium" Class="mr-2" />
        <MudText Typo="Typo.h6">Account details</MudText>
      </MudDrawerHeader>
      <MudItem>
        <MudStack Spacing="3" Class="mt-5">

          <MudTextField T="string" Label="IBAN" Value="Account?.AccountNumber" Variant="Variant.Filled" ReadOnly="true"
            Adornment="Adornment.End" IconSize="Size.Medium" AdornmentIcon="@Icons.Material.Filled.ContentCopy"
            Underline="false" AdornmentColor="Color.Primary"
            OnAdornmentClick="@(() => CopyToClipboardAsync(Account?.AccountNumber ?? string.Empty))" />

          <MudDivider Class="my-2" />

          <MudStack Row="true" AlignItems="AlignItems.Start" Spacing="2">
            <MudIcon Icon="@Icons.Material.Filled.Lightbulb" Color="Color.Primary" Class="mt-1" />
            <MudText Typo="Typo.body2">Use these details to receive your salary and transfers from a Euro bank
              account.
            </MudText>
          </MudStack>

          <MudStack Row="true" AlignItems="AlignItems.Start" Spacing="2">
            <MudIcon Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" Class="mt-1" />
            <MudText Typo="Typo.body2">
              Give these details to merchants to set up Direct Debits and automatically pay off your recurring bills.
            </MudText>
          </MudStack>

          <MudStack Row="true" AlignItems="AlignItems.Start" Spacing="2">
            <MudIcon Icon="@Icons.Material.Filled.AccessTime" Color="Color.Primary" Class="mt-1" />
            <MudText Typo="Typo.body2">If the sending bank supports instant payments, the payment will arrive in a few
              seconds. Otherwise, it will take up to 2 working days.</MudText>
          </MudStack>
        </MudStack>
      </MudItem>
    </MudDrawer>

    <!--Main Content-->
    <MudItem xs="12" Class="pr-2">
      <MudItem xs="12">
        <MudPaper Elevation="0" Class="d-flex justify-space-between align-center pa-2 mb-2">
          <MudStack Spacing="0">
            <MudText Typo="Typo.h5">
              <b><span class="balance-counter"
                  data-prefix="@FormatUtilities.GetCurrencySymbol(Account?.Currency.ToString() ?? "USD")"
                  style="--target:@(Convert.ToInt16(Account?.Balance ?? 0m))">

                </span></b>
            </MudText>
            <MudText Typo="Typo.body2">@(Account?.Type) - @(Account?.Currency.ToString() ?? "-")</MudText>
          </MudStack>

          <MudStack Row="true">
            <MudButton DropShadow="false" OnClick="@(() => OpenCreateTransactionDialog(Account ?? new AccountRead()))"
              Size="Size.Small" Variant="Variant.Filled">
              <MudIcon Icon="@Icons.Material.Filled.Payment" Color="Color.Primary" />
              <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudText Typo="Typo.button" Class="ml-2">Payment</MudText>
              </MudHidden>
            </MudButton>

            <MudButton DropShadow="false" Size="Size.Small" Variant="Variant.Filled" OnClick="@StatementDialog">
              <MudIcon Icon="@Icons.Material.Filled.Description" Color="Color.Primary" />
              <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudText Typo="Typo.button" Class="ml-2">Statement</MudText>
              </MudHidden>
            </MudButton>

            <MudButton DropShadow="false" Size="Size.Small" Variant="Variant.Filled" OnClick="@ToggleDrawer">
              <MudIcon Icon="@Icons.Material.Filled.AccountBalanceWallet" Color="Color.Primary" />
              <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudText Typo="Typo.button" Class="ml-2">Account details</MudText>
              </MudHidden>
            </MudButton>
          </MudStack>
        </MudPaper>
      </MudItem>
      <!-- Transactions List Section -->
      <HomeContent Transactions="Transactions" Accounts="AccountComposable.Accounts" />
    </MudItem>
  </MudDrawerContainer>
</MudItem>

@code
{
  private UserRead? CurrentUser => UserState.CurrentUser;
  private AccountRead? Account => AccountComposable.Accounts?.FirstOrDefault();
  private TransactionRead[]? Transactions => TransactionsComposable.CurrentTransactions;
  private bool _open = false;
  [Parameter] public EventCallback<bool> OpenChanged { get; set; }
  private void ToggleDrawer()
  {
    _open = !_open;
  }
  private OpenDialog? dialog;

  protected override async Task OnInitializedAsync()
  {
    TransactionsComposable.RegisterComponent(HandleTransactionStateChanged);
    AccountComposable.RegisterComponent(HandleAccountStateChanged);
    await LoadInitialDataAsync();
  }
  private async Task LoadInitialDataAsync()
  {
    if (CurrentUser != null)
    {
      bool forceRefresh = true;
      await AccountComposable.OnInitializeAsync(CurrentUser.User.Id, forceRefresh);

      if (TransactionState.CurrentTransactions == null)
      {
        await TransactionsComposable.OnInitializedAsync(forceRefresh);
      }
    }
  }

  private void HandleUserStateChanged()
  {
    InvokeAsync(StateHasChanged);
  }
  private void HandleAccountStateChanged()
  {
    InvokeAsync(StateHasChanged);
  }
  private void HandleTransactionStateChanged()
  {
    InvokeAsync(StateHasChanged);
  }
  private async Task StatementDialog()
  {
    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
    await DialogService.ShowAsync<DownloadStatementDialog>(
    "Download Statement", new DialogParameters(), options);
  }
  private async Task OpenCreateTransactionDialog(AccountRead sourceAccount)
  {
    if (dialog == null) return;
    var dialogParameters = new DialogParameters<CreateTransactionDialog>();
    dialogParameters.Add(x => x.PreSelectedSourceAccountNumber, sourceAccount.AccountNumber ?? string.Empty);

    await dialog.OpenDialogAsync<CreateTransactionDialog, TransactionCreate>(
    title: "Create New Transaction",
    parameters: dialogParameters,
    onSuccess: async (model) => await TransactionState.CreateTransaction(model),
    successMessage: "Transaction created successfully!",
    additionalActions: async () =>
    {
      if (UserState.CurrentUser != null)
      {
        await AccountComposable.OnInitializeAsync(UserState.CurrentUser.User.Id, true);
        await TransactionsComposable.OnInitializedAsync(true);
      }
    }
    );
  }
  private async Task CopyToClipboardAsync(string text)
  {
    await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    Snackbar.Add("Copied to clipboard!", Severity.Success, config => { config.ShowCloseIcon = false; });
  }
  public void Dispose()
  {
    UserState.OnUserStateChanged -= HandleUserStateChanged;
    TransactionsComposable.UnregisterComponent(HandleTransactionStateChanged);
    AccountComposable.UnregisterComponent(HandleAccountStateChanged);
  }
}
<style>
  .mud-drawer-container {
    min-height: 480px;
  }

  .mud-drawer-account>.mud-drawer-content>.mud-drawer-header {
    min-height: 0;
  }

  .mud-drawer-account {
    padding: 8px;
    border-radius: var(--mud-default-borderradius);
    color: var(--mud-palette-text-primary);
    background-color: var(--mud-palette-surface);
    width: 400px;
    @* --mud-palette-primary-hover: rgba(237 240 243 / 31%) !important; *@
  }

  .mud-input.mud-input-filled {
    border-radius: 4px;
  }
</style>