@using Banko.Client.Models.Account
@using Banko.Client.Helper
@using Banko.Client.Models.Transaction
@using Banko.Client.Models.User
@using Banko.Client.Pages.Account
@using Banko.Client.Services
@using Banko.Client.Services.Account
@using Banko.Client.Services.User
@using Banko.Client.Services.Transaction
@using Banko.Client.Components
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web

@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject TransactionStateService TransactionState
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AccountStateService AccountState
@inject UserStateService UserState
@inject IDialogService DialogService

<PageTitle>Home</PageTitle>
<OpenDialog @ref="dialog" />

<MudItem xs="12" Class="pr-2">
  <!-- Header Section -->
  <MudItem xs="12">
    <MudPaper Elevation="0" Class="d-flex justify-space-between align-center pa-2 mb-2">
      <MudStack Spacing="0">
        <MudText Typo="Typo.h5">@CurrencyFormatter.FormatCurrencySymbol(Account?.Balance ?? 0m, Account?.Currency.ToString() ?? "USD")</MudText> 
        <MudText Typo="Typo.body2">@(Account?.Type) - @(Account?.Currency.ToString() ?? "-")</MudText>
      </MudStack>
      <MudStack Row="true" Spacing="1">
        <MudButton OnClick="@(() => OpenCreateTransactionDialog(Account ?? new AccountRead()))" Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Payment" IconColor="Color.Primary">Payment</MudButton>

        <MudButton Size="Size.Small" Variant="Variant.Filled" OnClick="@StatementDialog" StartIcon="@Icons.Material.Filled.Description" IconColor="Color.Primary">Statement</MudButton>
        <MudButton Size="Size.Small" Variant="Variant.Filled" OnClick="@ToggleDrawer" StartIcon="@Icons.Material.Filled.AccountBalanceWallet" IconColor="Color.Primary">Account details</MudButton>
      </MudStack>
    </MudPaper>
  </MudItem>

  <!-- Transactions List Section -->
  <MudItem xs="12">
    @if (LoadingService.IsLoading && (!transactions?.Any() ?? true))
    {
      <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mx-auto my-4" />
    }
    else if (transactions != null && transactions.Any())
    {
      @foreach (var transaction in transactions)
      {
        <MudPaper Class="pa-3 mb-2" Elevation="0">
          <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
              <MudAvatar Rounded="true" Color="@FormatUtilities.GetStatusColor(transaction.Status)" Class="mr-3">
                <MudText Typo="Typo.body2">@FormatUtilities.GetTransactionInitials(transaction.Description)</MudText>
              </MudAvatar>
              <MudStack Spacing="0">
                <MudText Typo="Typo.body1">@transaction.Description</MudText>
                <MudStack Row="true">
                  <MudText Typo="Typo.caption" Class="pa-0 ma-0">@transaction.Status.ToString()</MudText>
                  <MudText Typo="Typo.caption" Class="pa-0 ma-0">@transaction.CreatedAt.ToLocalTime().ToString("MMM dd, hh:mm tt")</MudText>
                  <MudText Typo="Typo.caption" Class="d-block d-sm-inline"> - @(transaction?.TransactionNumber)</MudText>
                </MudStack>
              </MudStack>
            </MudStack>

            <MudStack Spacing="0" AlignItems="AlignItems.End">
              <MudText Typo="Typo.body1" Color="@(transaction.Amount < 0 ? Color.Error : Color.Success)">
                @(FormatUtilities.GetAmountInitials(string.Join(",", CurrentAccountNumbers), transaction.SourceAccountNumber ?? string.Empty, transaction.DestinationAccountNumber ?? string.Empty)) @(CurrencyFormatter.FormatCurrencySymbol(transaction.Amount, transaction.Currency.ToString()))
              </MudText>
            </MudStack>
          </MudStack>
        </MudPaper>
      }
      <MudItem Class="d-flex justify-center mt-4">
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="NavigateToAllTransactions">See all</MudButton>
      </MudItem>
    }
    else
    {
      <MudAlert Severity="Severity.Info">No transactions to display.</MudAlert>
    }
  </MudItem>
</MudItem>

@code {
  [Parameter] public bool Open { get; set; }
  [Parameter] public EventCallback<bool> OpenChanged { get; set; }
  [Parameter] public EventCallback ToggleDrawer { get; set; }
  private TransactionRead[]? transactions => TransactionState.CurrentTransactions ?? Array.Empty<TransactionRead>();
  private AccountRead? Account => AccountState.CurrentAccounts?.FirstOrDefault();
  private AccountRead[]? Accounts => AccountState.CurrentAccounts ?? [];
  private HashSet<string> CurrentAccountNumbers => AccountState.CurrentAccounts?.Select(a => a.AccountNumber)?.ToHashSet() ?? new HashSet<string>();
  private OpenDialog? dialog;
  protected override async Task OnInitializedAsync()
  {
    TransactionState.OnTransactionStateChanged += HandleStateChange;
    AccountState.OnAccountStateChanged += HandleStateChange;
    if (transactions != null && !transactions.Any())
    {
      await LoadInitialDataAsync();
    }
  }
  
  private async Task LoadInitialDataAsync()
  {
    LoadingService.IsLoading = true;
    StateHasChanged(); // Update UI to show loader
    try
    {
      await UserState.LoadUserDataAsync();
      if (UserState.CurrentUser != null)
      {
        await TransactionState.InitializeTransactionStateAsync(true);
        await AccountState.InitializeAccountStateAsync(UserState.CurrentUser.User.Id, true);
      }
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
    }
    finally
    {
      LoadingService.IsLoading = false;
      StateHasChanged();
    }
  }
  private async Task OpenCreateTransactionDialog(AccountRead sourceAccount)
  {
    if (dialog == null) return;
    var dialogParameters = new DialogParameters<CreateTransactionDialog>();
    dialogParameters.Add(x => x.PreSelectedSourceAccountNumber, sourceAccount.AccountNumber ?? string.Empty);

    await dialog.OpenDialogAsync<CreateTransactionDialog, TransactionCreate>(
      title: "Create New Transaction",
      parameters: dialogParameters,
      onSuccess: async (model) => await TransactionState.CreateTransaction(model),
      successMessage: "Transaction created successfully!",
      additionalActions: async () =>
      {
        if (UserState.CurrentUser != null)
        {
          await AccountState.InitializeAccountStateAsync(UserState.CurrentUser.User.Id, true);
          await TransactionState.InitializeTransactionStateAsync(true);
        }
      }
    );
  }

  private async Task StatementDialog()
  {
    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
    await DialogService.ShowAsync<DownloadStatementDialog>(
      "Download Statement", new DialogParameters(), options);
  }

  private void HandleStateChange()
  {
    InvokeAsync(StateHasChanged);
  }
  
  private void NavigateToAllTransactions()
  {
    NavigationManager.NavigateTo("/transactions");
  }
  
  public void Dispose()
  {
    TransactionState.OnTransactionStateChanged -= HandleStateChange;
  }
}