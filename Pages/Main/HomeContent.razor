@using Banko.Client.Models.Account
@using Banko.Client.Helper
@using Banko.Client.Models.Transaction
@using Banko.Client.Models.User
@using Banko.Client.Pages.Account
@using Banko.Client.Services
@using Banko.Client.Services.Account
@using Banko.Client.Services.User
@using Banko.Client.Services.Transaction
@using Banko.Client.Components
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web

@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject TransactionStateService TransactionState
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AccountStateService AccountState
@inject UserStateService UserState

<PageTitle>Home</PageTitle>

<MudItem xs="12" Class="pr-2">
  
  <MudItem xs="12">
    @if (LoadingService.IsLoading && (!Transactions?.Any() ?? true))
    {
      <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mx-auto my-4" />
    }
    else if (Transactions != null && Transactions.Any())
    {
      @foreach (var transaction in Transactions.OrderByDescending(t => t.CreatedAt).Take(8))
      {
        <MudPaper Class="pa-3 mb-2" Elevation="0">
          <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
              <MudAvatar Rounded="true" Color="@FormatUtilities.GetStatusColor(transaction.Status)" Class="mr-3">
                <MudText Typo="Typo.body2">@FormatUtilities.GetTransactionInitials(transaction.Description)</MudText>
              </MudAvatar>
              
              <MudStack Spacing="0">
                <MudText Typo="Typo.body1">@transaction.Description</MudText>
                <MudStack Row="true">
                  @* <MudText Typo="Typo.caption" Class="pa-0 ma-0">@transaction.Status.ToString()</MudText> *@
                  <MudText Typo="Typo.caption" Class="pa-0 ma-0">@transaction.CreatedAt.ToLocalTime().ToString("dd MMMM, HH:mm")</MudText>
                  <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <MudText Typo="Typo.caption" Class="d-block d-sm-inline"> - @(transaction?.TransactionNumber)</MudText>
                  </MudHidden>
                </MudStack>
              </MudStack>
            </MudStack>

            <MudStack Spacing="0" AlignItems="AlignItems.End">
              <MudText Typo="Typo.body1" Color="@(transaction.Amount < 0 ? Color.Error : Color.Success)">
                @{
                  // 2) compute symbol, sign and abs‚Äêvalue
                  var symbol = FormatUtilities.GetCurrencySymbol(transaction.Currency.ToString());
                  var sign   = transaction.Amount < 0 ? "-" : "+";
                  var number = Math.Abs(transaction.Amount).ToString("N2");
                }
                @($"{symbol} {sign}{number}")
              </MudText>
            </MudStack>
          </MudStack>
        </MudPaper>
      }
      <MudItem Class="d-flex justify-center mt-4">
        <MudButton FullWidth DropShadow="false" Variant="Variant.Filled" Color="Color.Surface" OnClick="NavigateToAllTransactions">See all</MudButton>
      </MudItem>
    }
    else
    {
      <MudAlert Severity="Severity.Info">No transactions to display.</MudAlert>
    }
  </MudItem>
</MudItem>

@code {
  [Parameter] public TransactionRead[]? Transactions { get; set; }
  [Parameter] public AccountRead[]? Accounts { get; set; }

  private HashSet<string> CurrentAccountNumbers => Accounts?.Select(a => a.AccountNumber)?.ToHashSet() ?? new HashSet<string>();
  private void NavigateToAllTransactions()
  {
    NavigationManager.NavigateTo("/transactions");
  }
}