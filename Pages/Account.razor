@page "/account/{UserId:int}"
@using Banko.Client.Models.Account
@using Banko.Client.Services
@using Banko.Client.Services.Account
@using Microsoft.AspNetCore.Authorization

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject AccountStateService AccountState
@inject HttpClient Http
@inject IDialogService DialogService

@attribute [Authorize]
@implements IDisposable

<PageTitle>Account</PageTitle>

@if (!accounts?.Any() ?? true)
{
  <MudAlert Severity="Severity.Info">No accounts found.</MudAlert>
}
else
{
  <MudExpansionPanels>
    @foreach (var account in accounts!)
    {
      <MudExpansionPanel>
        <TitleContent>
          <div class="d-flex align-center mr-3">
            <MudText Class="mr-4">@account.AccountNumber</MudText>
            <MudChip T="string" Color="@GetAccountTypeColor(account.Type)" Size="Size.Small" Class="mr-4">
              @account.Type
            </MudChip>
            <MudChip T="string" Color="@GetStatusColor(account.Status)" Size="Size.Small" Class="mr-4">
              @account.Status
            </MudChip>
            <MudText Class="ml-auto">@account.Balance.ToString("C2")</MudText>
          </div>
        </TitleContent>
        <ChildContent>
          <MudGrid Class="justify-space-between">
            <MudItem xs="12" md="5">
              <MudList T="string" Dense="true">
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">ID:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@account.Id</MudText>
                </MudElement>
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">Account Number:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@account.AccountNumber</MudText>
                </MudElement>
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.Payment" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">Balance:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@account.Balance.ToString("C2")</MudText>
                </MudElement>
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">Type:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@account.Type</MudText>
                </MudElement>
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.Stream" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">Status:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@account.Status</MudText>
                </MudElement>
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.MonetizationOn" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">Currency:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@account.Currency</MudText>
                </MudElement>
              </MudList>
            </MudItem>
            <MudItem xs="12" md="5">
              <MudList T="string" Dense="true">
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.Percent" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">Interest Rate:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@account.InterestRate.ToString("P2")</MudText>
                </MudElement>
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">Minimum Balance:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@account.MinimumBalance.ToString("C2")</MudText>
                </MudElement>
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.CreditScore" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">Overdraft Limit:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@account.OverdraftLimit.ToString("C2")</MudText>
                </MudElement>
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">Created:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@account.CreatedAt.ToLocalTime().ToString("g")</MudText>
                </MudElement>
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.Update" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">Last Updated:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@account.UpdatedAt.ToLocalTime().ToString("g")</MudText>
                </MudElement>
                <MudElement Class="d-flex align-center mb-2">
                  <MudIcon Icon="@Icons.Material.Filled.History" Size="Size.Small" Class="mr-3" />
                  <MudText Class="flex-1" Typo="Typo.body2">Last Transaction:</MudText>
                  <MudText Class="flex-2" Typo="Typo.body2">@(account.LastTransactionDate?.ToLocalTime().ToString("g") ??
                                    "N/A")</MudText>
            </MudElement>
          </MudList>
        </MudItem>
        <MudItem xs="12">
          <MudText Typo="Typo.subtitle2">Description</MudText>
          <MudText Typo="Typo.body2">@(account.Description ?? "N/A")</MudText>
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-end">
          <MudButton StartIcon="@Icons.Material.Filled.Payment" Color="Color.Primary"
            OnClick="@(() => HandleTransaction(account))">
            New Transaction
          </MudButton>
        </MudItem>
      </MudGrid>
    </ChildContent>
  </MudExpansionPanel>
    }
  </MudExpansionPanels>
}

@code {
  [Parameter]
  public int UserId { get; set; }
  private AccountRead[]? accounts => AccountState.CurrentAccounts;

  protected override async Task OnInitializedAsync()
  {
    AccountState.OnUserStateChanged += HandleStateChange;
    LoadingService.IsLoading = true;
    try
    {
      await AccountState.InitializeAccountStateAsync(UserId);
      if (accounts?.Any() == true)
      {
        Snackbar.Add($"Found {accounts.Length} account(s)", Severity.Success);
      }
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error loading accounts: {ex.Message}", Severity.Error);
    }
    finally
    {
      LoadingService.IsLoading = false;
    }
  }
  private void HandleStateChange()
  {
    InvokeAsync(StateHasChanged);
  }
  public void Dispose()
  {
    AccountState.OnUserStateChanged -= HandleStateChange;
  }

  private void HandleTransaction(AccountRead account)
  {
    // TODO: Implement transaction handling
    Snackbar.Add("Transaction feature coming soon!", Severity.Info);
  }

  private Color GetAccountTypeColor(AccountType type) => type switch
  {
    AccountType.Checking => Color.Primary,
    AccountType.Savings => Color.Success,
    AccountType.Investment => Color.Warning,
    AccountType.Business => Color.Info,
    _ => Color.Default
  };

  private Color GetStatusColor(AccountStatus status) => status switch
  {
    AccountStatus.Active => Color.Success,
    AccountStatus.Inactive => Color.Warning,
    AccountStatus.Frozen => Color.Error,
    AccountStatus.Closed => Color.Dark,
    AccountStatus.PendingApproval => Color.Info,
    _ => Color.Default
  };
}
