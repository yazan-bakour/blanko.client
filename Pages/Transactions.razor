@page "/transactions"

@using Microsoft.AspNetCore.Authorization
@using Banko.Client.Models.Transaction
@using Banko.Client.Services
@using Banko.Client.Services.Transaction
@using Banko.Client.Helper

@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject TransactionStateService TransactionState
@inject IDialogService DialogService

@attribute [Authorize]
@implements IDisposable

<PageTitle>Transactions</PageTitle>


@if (LoadingService.IsLoading)
{
  <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (!transactions?.Any() ?? true)
{
  <MudAlert Severity="Severity.Info" Class="mt-4">No Transactions found for this user. Click 'Create New Transaction' to
    add one.
  </MudAlert>
  //Add new transaction button
}
else
{
  <MudExpansionPanels MultiExpansion="true" Elevation="0">
    @foreach (var transaction in transactions!)
    {
      <MudExpansionPanel Class="border-none mb-2">
        <TitleContent>
          <MudStack Row="true" Justify="Justify.SpaceBetween" Class="width-100 align-items-center pr-1">
            <MudText Typo="Typo.body1">@transaction.Type - @CurrencyFormatter.FormatCurrencySymbol(transaction.Amount,
                        transaction.Currency.ToString())
        </MudText>
        <MudText Typo="Typo.caption">@transaction.TransactionDate.ToLocalTime().ToString("g")</MudText>
      </MudStack>
    </TitleContent>
    <ChildContent>
      <MudGrid Class="justify-space-between">
        @* Column 1: Core Transaction Details *@
        <MudItem xs="12" md="5">
          <MudList T="string" Dense="true" ReadOnly="true">
            <MudListItem Icon="@Icons.Material.Filled.ConfirmationNumber">Transaction #: @transaction.TransactionNumber
            </MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.Payment">Amount: @transaction.Amount.ToString("C2")</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.Abc">Type: @transaction.Type</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.CreditCard">Method: @transaction.PaymentMethod</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.SyncAlt">Status: <MudChip Label="true"
                Color="@FormatUtilities.GetStatusColor(transaction.Status)" Size="Size.Small">@transaction.Status
              </MudChip>
            </MudListItem>
          </MudList>
        </MudItem>
        @* Column 2: Account & Date Details *@
        <MudItem xs="12" md="5">
          <MudList T="string" Dense="true" ReadOnly="true">
            <MudListItem Icon="@Icons.Material.Filled.ArrowForward">From: @transaction.SourceName
              (@transaction.SourceAccountNumber)</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowBack">To: @transaction.RecipientName
              (@transaction.DestinationAccountNumber)</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.MonetizationOn">Currency: @transaction.Currency</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.CalendarToday">Date:
              @transaction.TransactionDate.ToLocalTime().ToString("g")</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.Update">Created:
              @transaction.CreatedAt.ToLocalTime().ToString("g")</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.EditCalendar">Updated:
              @(transaction.UpdatedAt?.ToLocalTime().ToString("g") ?? "N/A")</MudListItem>
          </MudList>
        </MudItem>
        @* Description Row *@
        @if (!string.IsNullOrWhiteSpace(transaction.Description))
            {
              <MudItem xs="12">
                <MudText Typo="Typo.subtitle2">Description</MudText>
                <MudText Typo="Typo.body2">@transaction.Description</MudText>
              </MudItem>
            }
          </MudGrid>
        </ChildContent>
      </MudExpansionPanel>
    }
  </MudExpansionPanels>
}

@code {
  @* public int transactionId { get; set; } *@
  private TransactionRead[]? transactions => TransactionState.CurrentTransactions;

  protected override async Task OnInitializedAsync()
  {
    TransactionState.OnTransactionStateChanged += HandleStateChange;
    await LoadTransactionDataAsync();
  }

  private async Task LoadTransactionDataAsync()
  {
    LoadingService.IsLoading = true;
    StateHasChanged();
    try
    {
      await TransactionState.InitializeTransactionStateAsync();
    }
    catch (Exception ex)
    {
      Snackbar.Add(ex.Message, Severity.Error);
    }
    finally
    {
      LoadingService.IsLoading = false;
      StateHasChanged();
    }
  }
  private void HandleStateChange()
  {
    InvokeAsync(StateHasChanged);
  }
  public void Dispose()
  {
    TransactionState.OnTransactionStateChanged -= HandleStateChange;
  }
}
