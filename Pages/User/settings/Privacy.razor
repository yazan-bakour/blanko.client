@page "/profile/privacy"

@using Banko.Client.Models.User;
@using Banko.Client.Services.User
@using Banko.Client.Services.Auth
@using Banko.Client.Services
@inject UserStateService UserState
@inject LoadingService LoadingService
@inject ISnackbar Snackbar
@inject AuthStateProvider AuthState

<MudPaper Class="pa-4" Elevation="0">
  <MudItem xs="12" Class="d-flex justify-space-between">
    <MudText Typo="Typo.h5">Privacy</MudText>

    <MudItem Style="height: 50px;">
      @if (isInitialized && AuthState.UserPreferences.Privacy.HideEmail != _originalHideEmail)
      {
        <MudButton DropShadow="false" Variant="Variant.Filled" Color="Color.Dark" OnClick="HandleEmailSaveAsync"
          Class="mr-2" Disabled="LoadingService.IsLoading">Save</MudButton>
        <MudButton DropShadow="false" Variant="Variant.Filled" Color="Color.Default" OnClick="CancelEdit"
          Disabled="LoadingService.IsLoading">
          Cancel</MudButton>
      }
    </MudItem>
  </MudItem>

  <MudGrid Class="mt-4">
    <MudItem>
      <MudSwitch T="bool" Value="AuthState.UserPreferences.Privacy.HideEmail" ValueChanged="SwitchHideEmail"
        Color="Color.Primary">
        @(AuthState.UserPreferences.Privacy.HideEmail ? "Hide Email" : "Show Email")
      </MudSwitch>
    </MudItem>
  </MudGrid>
</MudPaper>

@code {
  private bool isInitialized = false;
  private bool _originalHideEmail;
  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
    {
      _originalHideEmail = AuthState.UserPreferences.Privacy.HideEmail;
      isInitialized = true;
    }
  }
  private void SwitchHideEmail(bool newValue)
  {
    AuthState.UserPreferences.Privacy.HideEmail = newValue;
    StateHasChanged();
    AuthState.NotifyPreferencesChanged();
  }
  private async Task HandleEmailSaveAsync()
  {
    LoadingService.IsLoading = true;
    var success = await UserState.UpdatePreference(AuthState.UserPreferences);
    if (success)
    {
      _originalHideEmail = AuthState.UserPreferences.Privacy?.HideEmail ?? false;
      Snackbar.Add("Privacy updated.", Severity.Success);
    }
    else
    {
      Snackbar.Add("Failed to update privacy settings.", Severity.Error);
    }
    LoadingService.IsLoading = false;
  }
  private void CancelEdit()
  {
    AuthState.UserPreferences.Privacy.HideEmail = _originalHideEmail;
    StateHasChanged();
    AuthState.NotifyPreferencesChanged();
  }
}