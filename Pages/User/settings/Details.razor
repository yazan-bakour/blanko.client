@page "/profile/account"

@using System
@using Banko.Client.Extensions
@using Banko.Client.Models.User
@using Banko.Client.Services
@using Banko.Client.Services.User
@using Microsoft.AspNetCore.Authorization

@inject UserStateService UserState
@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<MudItem Class="d-flex justify-space-between">
  @* <MudLink Class="w-100 d-flex justify-start rounded-lg pb-2"
      OnClick="@(() => NavigationManager.NavigateTo("/profile"))">
      
      <MudIcon Class="mr-4" Icon="@Icons.Material.Filled.KeyboardBackspace" />
    </MudLink> *@
  <MudIconButton Ripple Icon="@Icons.Material.Filled.KeyboardBackspace" Color="Color.Primary" Size="Size.Medium"
    OnClick="@(() => NavigationManager.NavigateTo("/profile"))" aria-label="Back button"
    Style="margin-left: -10px; margin-top: -8px;" />

  <MudItem Class="d-flex justify-end align-self-end" Style="height: 36px;">
    @if (_isEditing)
    {
      <MudButton Ripple DropShadow="false" Variant="Variant.Filled" Color="Color.Dark" OnClick="HandleSaveAsync"
        Class="mr-2" Disabled="LoadingService.IsLoading">Save</MudButton>
      <MudButton Ripple DropShadow="false" Variant="Variant.Filled" Color="Color.Default" OnClick="CancelEdit"
        Disabled="LoadingService.IsLoading">Cancel</MudButton>
    }
    else
    {
      <MudButton DropShadow="false" Variant="Variant.Filled" OnClick="StartEdit">Edit</MudButton>
    }
  </MudItem>
</MudItem>
<MudForm Model="@detailsData" @ref="form" ValidationDelay="0" @bind-IsValid="@isSuccess" Spacing="3">
  <MudStack Class="d-flex flex-column">
    <MudText Typo="Typo.h6" Color="Color.Primary">Personal Details</MudText>
    <MudTextField Label="First Name" @bind-Value="detailsData.FirstName" Disabled="!_isEditing"
      Variant="_isEditing? Variant.Filled: Variant.Text" Required />
    <MudTextField Label="Last Name" @bind-Value="detailsData.LastName" Disabled="!_isEditing"
      Variant="_isEditing? Variant.Filled: Variant.Text" Required />

    @{
      if (_isEditing)
      {
        <MudTextField Label="Password" @bind-Value="detailsData.NewPassword" Disabled="!_isEditing"
          InputType="@(_passwordVisible? InputType.Text: InputType.Password)"
          Adornment="@(_isEditing? Adornment.End: Adornment.None)"
          AdornmentIcon="@(_passwordVisible? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
          OnAdornmentClick="() => _passwordVisible = !_passwordVisible" Variant="Variant.Filled" Immediate="true" />
      }
    }

    <MudDatePicker Label="Date of Birth" Editable="true" Disabled="!_isEditing"
      Variant="_isEditing? Variant.Filled: Variant.Text" Placeholder="Select Date of Birth" DateFormat="dd.MM.yyyy"
      @bind-Date="detailsData.DateOfBirth" Mask="@(new DateMask("dd.MM.yyyy"))" PickerVariant="PickerVariant.Dialog"
      Adornment="@(_isEditing? Adornment.End: Adornment.None)" />

    <MudSelect T="UserGender ?" Label="Gender" @bind-Value="detailsData.Gender" Disabled="!_isEditing"
      Variant="_isEditing? Variant.Filled : Variant.Text" FullWidth AnchorOrigin="Origin.BottomLeft"
      Adornment="_isEditing ? Adornment.End : Adornment.None">
      <MudSelectItem T="UserGender ?" Value="@(UserGender.Male)">Male</MudSelectItem>
      <MudSelectItem T="UserGender ?" Value="@(UserGender.Female)">Female</MudSelectItem>
    </MudSelect>
    <MudTextField Label="Nationality" @bind-Value="detailsData.Nationality" Disabled="!_isEditing"
      Variant="_isEditing? Variant.Filled: Variant.Text" FullWidth />

    <MudText Typo="Typo.h6" Color="Color.Primary">Contact Information</MudText>
    <MudTextField Label="Phone Number" @bind-Value="detailsData.PhoneNumber" Disabled="!_isEditing"
      Variant="_isEditing? Variant.Filled: Variant.Text" FullWidth />
    <MudTextField Label="Address" @bind-Value="detailsData.Address" Disabled="!_isEditing"
      Variant="_isEditing? Variant.Filled: Variant.Text" FullWidth />
    <MudTextField Label="City" @bind-Value="detailsData.City" Disabled="!_isEditing"
      Variant="_isEditing? Variant.Filled: Variant.Text" FullWidth />
    <MudTextField Label="State" @bind-Value="detailsData.State" Disabled="!_isEditing"
      Variant="_isEditing? Variant.Filled: Variant.Text" FullWidth />
    <MudTextField Label="Zip Code" @bind-Value="detailsData.ZipCode" Disabled="!_isEditing"
      Variant="_isEditing? Variant.Filled: Variant.Text" FullWidth />
    <MudTextField Label="Country" @bind-Value="detailsData.Country" Disabled="!_isEditing"
      Variant="_isEditing? Variant.Filled: Variant.Text" FullWidth />
  </MudStack>
</MudForm>

@code {
  private UserUpdate detailsData = new UserUpdate();
  private UserUpdate originalDetailsData = new UserUpdate();
  private bool _isEditing = false;
  private MudForm? form;
  private bool isSuccess = false;
  private bool _passwordVisible = false;

  protected override async Task OnInitializedAsync()
  {
    await UserState.LoadUserDataAsync();
    var user = UserState.CurrentUser?.User;
    if (user == null) return;
    detailsData = UserState.CurrentUser?.ToUserUpdate() ?? new UserUpdate();
    originalDetailsData = new UserUpdate(detailsData);
  }

  private void StartEdit()
  {
    originalDetailsData = new UserUpdate(detailsData);
    _isEditing = true;
  }

  private async Task HandleSaveAsync()
  {
    if (form == null) return;

    LoadingService.IsLoading = true;
    await form.Validate();

    if (form.IsValid)
    {
      try
      {
        bool success = await UserState.UpdateProfileSettingsAsync(detailsData);

        if (success)
        {
          _isEditing = false;
          // Reload details data to refresh the UI
          @* await LoadDetailsData(); *@
          Snackbar.Add("Account details updated successfully!", Severity.Success);
        }
        else
        {
          Snackbar.Add("Failed to update account details.", Severity.Error);
        }
      }
      catch (Exception ex)
      {
        Snackbar.Add($"Error updating account details: {ex.Message}", Severity.Error);
      }
    }
    else
    {
      Snackbar.Add("Please correct validation errors.", Severity.Warning);
    }

    LoadingService.IsLoading = false;
  }

  private void CancelEdit()
  {
    detailsData = new UserUpdate(originalDetailsData);
    _isEditing = false;
    StateHasChanged();
  }
}