@page "/profile/appearance"

@using Banko.Client.Models.User
@using Banko.Client.Services.User
@using Banko.Client.Services

@inject UserStateService UserState
@inject LoadingService LoadingService
@inject ISnackbar Snackbar

<MudPaper Class="pa-4" Elevation="0">
  <MudItem xs="12" Class="d-flex justify-space-between">
    <MudText Typo="Typo.h5">Appearance Settings</MudText>
    <MudItem Style="height: 50px;">
      @if (isInitialized && UserState.Preference.Theme != _originalTheme)
      {
        <MudButton DropShadow="false" Variant="Variant.Filled" Color="Color.Dark" OnClick="HandleSaveAsync" Class="mr-2"
          Disabled="LoadingService.IsLoading">Save</MudButton>
        <MudButton DropShadow="false" Variant="Variant.Filled" Color="Color.Default" OnClick="CancelEdit"
          Disabled="LoadingService.IsLoading">
          Cancel</MudButton>
      }
    </MudItem>
  </MudItem>

  <MudGrid Class="mt-4">
    <MudItem>
      <MudSwitch T="bool" Color="Color.Primary" Value="UserState.Preference.Theme" ValueChanged="OnThemeSwitchChanged">
        @(UserState.Preference.Theme ? "Dark Mode" : "Light Mode")
      </MudSwitch>
    </MudItem>
  </MudGrid>
</MudPaper>

@code {
  private bool isInitialized = false;
  private bool _originalTheme;
  protected override async Task OnInitializedAsync()
  {
    LoadingService.IsLoading = true;
    try
    {
      await UserState.LoadUserDataAsync();
      var darkMode = GetDarkModePreference();
      UserState.Preference.Theme = darkMode;
      _originalTheme = darkMode;
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error subscribing to UserState.OnUserStateChanged: {ex.Message}", Severity.Error);
    }
    finally
    {
      isInitialized = true;
      LoadingService.IsLoading = false;
    }
  }
  private void OnThemeSwitchChanged(bool newValue)
  {
    UserState.Preference.Theme = newValue;
    UserState.NotifyUserStateChanged();
  }
  private bool GetDarkModePreference()
  {
    return UserState.CurrentUser?.User?.Preferences?
    .GetValueOrDefault("DarkMode") is string value &&
    bool.TryParse(value, out var result) ? result : false;
  }
  private async Task HandleSaveAsync()
  {
    LoadingService.IsLoading = true;
    var success = await UserState.UpdatePreference(UserState.Preference);

    if (success)
    {
      _originalTheme = UserState.Preference.Theme;
      Snackbar.Add("Appearance settings saved.", Severity.Success);
    }
    else
    {
      Snackbar.Add("Failed to update appearance settings.", Severity.Error);
    }
    LoadingService.IsLoading = false;
  }

  private void CancelEdit()
  {
    UserState.Preference.Theme = GetDarkModePreference();
    HandleUserStateChanged();
  }
  private void HandleUserStateChanged()
  {
    InvokeAsync(StateHasChanged);
  }
  public void Dispose()
  {
    UserState.OnUserStateChanged -= HandleUserStateChanged;
  }
}