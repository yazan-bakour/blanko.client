@page "/register"
@using Banko.Client.Models.User
@using Banko.Client.Services.User
@using Banko.Client.Services
@using Banko.Client.Services.Auth

@inject UserStateService UserState
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject AuthStateProvider AuthState

<MudCard Class="pa-4" Elevation="0">
  <MudCardContent>
    <MudForm Model="@registerModel" @ref="form" @bind-IsValid="@success">
      <MudTextField Label="Full Name" @bind-Value="registerModel.FullName" For="@(() => registerModel.FullName)"
        Immediate="true" Required />
      <MudTextField Label="Email" @bind-Value="registerModel.Email" For="@(() => registerModel.Email)" Immediate="true"
        Required />
      <MudTextField Label="Password" @bind-Value="registerModel.Password" For="@(() => registerModel.Password)"
        InputType="@(_passwordVisible? InputType.Text: InputType.Password)" Adornment="Adornment.End"
        AdornmentIcon="@(_passwordVisible? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
        OnAdornmentClick="() => _passwordVisible = !_passwordVisible" Immediate="true" Required />
    </MudForm>
  </MudCardContent>
  <MudCardActions Class="d-flex">
    <MudButton FullWidth DropShadow="false" Variant="Variant.Filled" Color="Color.Dark" Class="px-8 w-100"
      Size="Size.Large" Disabled="@(!success)" OnClick="HandleRegister">
      <MudText>Register</MudText>
    </MudButton>
  </MudCardActions>
</MudCard>

@code {
  private UserRegister registerModel = new();
  private bool success;
  private MudForm? form;
  private bool _passwordVisible = false;

  private async Task HandleRegister()
  {
    await form!.Validate();
    if (form.IsValid)
    {
      LoadingService.IsLoading = true;
      try
      {
        await AuthState.Register(registerModel);
        Snackbar.Add("Registration is successful, please login!", Severity.Success);
        NavigationManager.NavigateTo("/login");
      }
      catch (Exception ex)
      {
        Snackbar.Add(ex.Message, Severity.Error);
      }
      finally
      {
        LoadingService.IsLoading = false;
      }
    }
  }
}