@page "/Login"
@using Banko.Client.Models
@using Banko.Client.Services
@using Banko.Client.Services.User
@using Banko.Client.Services.Auth

@inject UserStateService UserState
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject IAuthService AuthService
@inject AuthStateProvider AuthState

<MudCard Elevation="25" Class="pa-4">
  <MudCardContent>
    <MudForm Model="@loginParameters" @ref="form" @bind-IsValid="@success">
      <MudTextField Label="Email" @bind-Value="loginParameters.Email" For="@(() => loginParameters.Email)"
        Immediate="true" Required />
      <MudTextField Label="Password" @bind-Value="loginParameters.Password" For="@(() => loginParameters.Password)"
        Immediate="true" Required />
    </MudForm>
  </MudCardContent>
  <MudCardActions Class="d-flex justify-center">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="px-8" Size="Size.Large" Disabled="@(!success)"
      OnClick="OnSubmit">
      <MudText>Login</MudText>
    </MudButton>
  </MudCardActions>
</MudCard>

@code {
  private UserLogin loginParameters = new();
  private bool success;
  private MudForm? form;

  async Task OnSubmit()
  {
    LoadingService.IsLoading = true;
    await form!.Validate();
    if (form.IsValid)
    {
      try
      {
        await AuthState.Login(loginParameters);
        Snackbar.Add("Login successful!", Severity.Success);
        NavigationManager.NavigateTo("");
      }
      catch (Exception ex)
      {
        Snackbar.Add(ex.Message, Severity.Error);
      }
      finally
      {
        LoadingService.IsLoading = false;
      }
    }
  }
}