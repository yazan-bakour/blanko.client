@page "/Login"
@using Banko.Client.Models
@using Banko.Client.Services.User
@inject UserStateService UserState
@inject NavigationManager NavigationManager

<div class="container">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card mt-5">
        <div class="card-header">
          <h3 class="text-center">Login</h3>
        </div>
        <div class="card-body">
          @if (!string.IsNullOrEmpty(errorMessage))
          {
            <div class="alert alert-danger">@errorMessage</div>
          }

          <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
              <label for="email">Email:</label>
              <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
              <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="form-group mb-3">
              <label for="password">Password:</label>
              <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
              <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <div class="d-grid">
              <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                  <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                  <span class="ms-2">Loading...</span>
                }
                else
                {
                  <span>Login</span>
                }
              </button>
            </div>
          </EditForm>
        </div>
      </div>
    </div>
  </div>
</div>

@code {
  private UserLogin loginModel = new();
  private string errorMessage = string.Empty;
  private bool isLoading = false;

  private async Task HandleLogin()
  {
    try
    {
      isLoading = true;
      errorMessage = string.Empty;
      await UserState.LoginAsync(loginModel);
      NavigationManager.NavigateTo("/");
    }
    catch (Exception ex)
    {
      errorMessage = ex.Message;
      Console.WriteLine($"Login error: {ex.Message}");
    }
    finally
    {
      isLoading = false;
    }
  }
}