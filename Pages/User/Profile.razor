@page "/profile"

@using System
@using Banko.Client.Models.User
@using Banko.Client.Services
@using Banko.Client.Services.User
@using Banko.Client.Services.Auth
@using Microsoft.AspNetCore.Authorization
@using Banko.Client.Pages.User.settings
@using System.Globalization
@using Banko.Client.Components
@using Banko.Client.Extensions;

@inject NavigationManager NavigationManager
@inject UserStateService UserState
@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject IAuthService AuthService

@attribute [Authorize]

<PageTitle>Profile</PageTitle>

<MudForm Model="@editParameters" @ref="form" ValidationDelay="0" @bind-IsValid="@isSuccess" Class="px-7 w-100">
  <MudItem xs="12">
    <MudGrid Spacing="0">
      <MudItem xs="6" Class="d-flex flex-column">
        <MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-1 mud-width-full">
          @editParameters.FullName
        </MudText>
        <MudText Typo="Typo.body1" Color="Color.Primary" Class="mt-1 mud-width-full">
          @editParameters.UniqueId
        </MudText>
        <MudText Typo="Typo.caption" Class="mt-1">Joined:
          @(editParameters.CreatedAt?.ToLocalTime().ToString("MMMM dd, yyyy HH:mm") ?? "N/A")
        </MudText>
        <MudItem xs="12" Class="d-flex flex-column">
          <MudText Typo="Typo.caption" Class="mt-1">Email: @editParameters.Email</MudText>
          <MudText Typo="Typo.caption" Class="mt-1">Role: @editParameters.Role</MudText>
        </MudItem>
      </MudItem>

      <!---image settings-->
      <MudItem xs="6" Class="d-flex justify-end mt-2">
        <MudItem Class="d-flex flex-column align-items-center">
          <ImageSettings UserData="editParameters" OnImageUpdated="HandleImageUpdated" />

          <MudItem Class="mt-2">
            @if (_isEditing)
            {
              <MudButton DropShadow="false" Variant="Variant.Filled" Color="Color.Dark" OnClick="HandleSaveAsync"
                Disabled="LoadingService.IsLoading">Save Changes</MudButton>
              <MudButton DropShadow="false" Variant="Variant.Filled" Color="Color.Default" OnClick="CancelEdit"
                Disabled="LoadingService.IsLoading">
                Cancel</MudButton>
            }
          </MudItem>
        </MudItem>
      </MudItem>

      <!--Profile settings-->
      <MudItem xs="12" Class="mt-4">
        <MudButton FullWidth DropShadow="false" Variant="Variant.Filled" Class="d-flex justify-start rounded-lg py-4"
          OnClick="@(() => NavigationManager.NavigateTo("/profile/account"))">
          <MudIcon Class="mr-4" Icon="@Icons.Material.Filled.PermIdentity" />
          <MudText>Personal details</MudText>
        </MudButton>

        <MudButton FullWidth DropShadow="false" Variant="Variant.Filled"
          Class="d-flex justify-start rounded-lg py-4 mt-4" OnClick="@(() => HandleLogout())">
          <MudIcon Class="mr-4" Icon="@Icons.Material.Filled.Logout" />
          <MudText>Log out</MudText>
        </MudButton>

      </MudItem>
    </MudGrid>

  </MudItem>
</MudForm>


@code {
  private UserUpdate editParameters = new UserUpdate();
  private UserUpdate originalParameters = new UserUpdate();
  private bool _isEditing = false;
  private MudForm? form;
  private bool isSuccess = false;
  private UserRead? CurrentUser => UserState.CurrentUser;

  private async Task HandleLogout()
  {
    await AuthService.LogoutAsync();
  }
  protected override void OnInitialized()
  {
    editParameters = UserState.CurrentUser?.ToUserUpdate() ?? new UserUpdate();
    originalParameters = new UserUpdate(editParameters);
  }

  private void StartEdit()
  {
    _isEditing = true;
    originalParameters = new UserUpdate(editParameters);
  }
  private void CancelEdit()
  {
    editParameters = new UserUpdate(originalParameters);
    _isEditing = false;
  }

  private void HandleImageUpdated(UserImageUploadResults updateResult)
  {
    Console.WriteLine($"Image updated: {updateResult?.ImageData}");
    _isEditing = true;
    if (updateResult != null && !string.IsNullOrEmpty(updateResult.ImageData))
    {
      editParameters.ProfilePictureDisplay = updateResult.ImageData;
      editParameters.ProfilePictureUrl = updateResult.ImageData;
    }
    StateHasChanged();
  }

  private async Task HandleSaveAsync()
  {
    if (form == null) return;

    await form.Validate();
    if (!form.IsValid)
    {
      Snackbar.Add("Please correct validation errors.", Severity.Warning);
      return;
    }
    LoadingService.IsLoading = true;

    try
    {
      bool success = await UserState.UpdateProfileSettingsAsync(editParameters);
      Console.WriteLine($"editParameters: {editParameters.ProfilePictureUrl}");

      if (success)
      {
        _isEditing = false;
        Snackbar.Add("Profile updated successfully.", Severity.Success);
      }
      else
      {
        Snackbar.Add("Failed to update profile.", Severity.Error);
      }
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error updating profile: {ex.Message}", Severity.Error);
    }
    finally
    {
      LoadingService.IsLoading = false;
    }
  }
}
