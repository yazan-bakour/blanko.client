@page "/profile"

@using System
@using Banko.Client.Models.User
@using Banko.Client.Services
@using Banko.Client.Services.User
@using Banko.Client.Services.Auth
@using Microsoft.AspNetCore.Authorization
@using Banko.Client.Pages.User.settings
@using System.Globalization
@using Banko.Client.Components

@inject NavigationManager NavigationManager
@inject UserStateService UserState
@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject IAuthService AuthService

@attribute [Authorize]

<PageTitle>Profile</PageTitle>

<MudForm Model="@editParameters" @ref="form" ValidationDelay="0" @bind-IsValid="@isSuccess" Class="px-7 w-100">
  <MudItem xs="12">
    <MudGrid Spacing="0">
      <MudItem xs="6" Class="d-flex flex-column">
        <MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-1 mud-width-full">
          @editParameters.FullName
        </MudText>
        <MudText Typo="Typo.body1" Color="Color.Primary" Class="mt-1 mud-width-full">
          @editParameters.UniqueId
        </MudText>
        <MudText Typo="Typo.caption" Class="mt-1">Joined:
          @(editParameters.CreatedAt?.ToLocalTime().ToString("MMMM dd, yyyy HH:mm") ?? "N/A")
        </MudText>
        <MudItem xs="12" Class="d-flex flex-column">
          <MudText Typo="Typo.caption" Class="mt-1">Email: @editParameters.Email</MudText>
          <MudText Typo="Typo.caption" Class="mt-1">Role: @editParameters.Role</MudText>
        </MudItem>
      </MudItem>

      <!---image settings-->
      <MudItem xs="6" Class="d-flex justify-end mt-2">
        <MudItem Class="d-flex flex-column align-items-center">
          <ImageSettings UserData="editParameters" OnImageUpdated="HandleImageUpdated" />

          <MudItem Class="mt-2">
            @if (_isEditing)
            {
              <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="HandleSaveAsync"
                Disabled="LoadingService.IsLoading">Save Changes</MudButton>
              <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="CancelEdit"
                Disabled="LoadingService.IsLoading">
                Cancel</MudButton>
            }
          </MudItem>
        </MudItem>
      </MudItem>

      <!--Profile settings-->
      <MudItem xs="12" Class="mt-4">
        <MudButton Variant="Variant.Filled" Class="w-100 d-flex justify-start rounded-lg py-4"
          OnClick="@(() => NavigationManager.NavigateTo("/profile/account"))">
          <MudIcon Class="mr-4" Icon="@Icons.Material.Filled.PermIdentity" />
          <MudText>Personal details</MudText>
        </MudButton>

        <MudButton Variant="Variant.Filled" Class="w-100 d-flex justify-start rounded-lg py-4 mt-4"
          OnClick="@(() => HandleLogout())">
          <MudIcon Class="mr-4" Icon="@Icons.Material.Filled.Logout" />
          <MudText>Log out</MudText>
        </MudButton>

      </MudItem>
    </MudGrid>

  </MudItem>
</MudForm>


@code {
  private UserUpdate editParameters = new UserUpdate();
  private UserUpdate originalParameters = new UserUpdate();
  private bool _isEditing = false;
  private MudForm? form;
  private bool isSuccess = false;
  private bool _passwordVisible = false;

  private async Task HandleLogout()
  {
    await AuthService.LogoutAsync();
  }

  protected override async Task OnInitializedAsync()
  {
    // When UserState changes, update our local copy if we're not in edit mode
    if (!_isEditing && UserState.CurrentUser != null)
    {
      await PopulateFromCurrentUser();
      StateHasChanged();
    }
  }
  private void HandleLoadError(Exception ex)
  {
    // Handle load error - perhaps show a more specific error or retry option
    Snackbar.Add($"Failed to load profile data: {ex.Message}", Severity.Error);
  }

  private async Task PopulateFromCurrentUser()
  {
    await UserState.LoadUserDataAsync();
    var user = UserState.CurrentUser?.User;
    if (user == null) return;

    // Create a new UserUpdate instance and populate from UserRead
    editParameters = new UserUpdate
    {
      Id = user.Id,
      FirstName = user.FirstName,
      LastName = user.LastName,
      Email = user.Email,
      Role = user.Role,
      FullName = user.FullName,
      UniqueId = user.UniqueId,
      CreatedAt = user.CreatedAt,
      ProfilePictureDisplay = user.ProfilePictureDisplay,
      ProfilePictureUrl = user.ProfilePictureDisplay?.StartsWith("http") == true ? user.ProfilePictureDisplay : null,
      ProfilePictureFile = null
    };

    // Create a backup for cancel operations
    originalParameters = new UserUpdate(editParameters);
  }

  private void HandleImageUpdated(UserImageUploadResults updateResult)
  {
    StartEdit();
    if (updateResult != null && !string.IsNullOrEmpty(updateResult.ImageData))
    {
      // Update the display image immediately
      editParameters.ProfilePictureDisplay = updateResult.ImageData;

      // Update the source property based on where the image came from
      if (updateResult.ImageSource == ImageSource.Url)
      {
        editParameters.ProfilePictureUrl = updateResult.ImageData;
        editParameters.ProfilePictureFile = null;
      }
      else // File
      {
        editParameters.ProfilePictureFile = updateResult.ImageData;
        editParameters.ProfilePictureUrl = null;
      }
    }
    StateHasChanged();
  }

  private void StartEdit()
  {
    originalParameters = new UserUpdate(editParameters);
    _isEditing = true;
  }
  private async Task HandleSaveAsync()
  {
    if (form == null) return;

    LoadingService.IsLoading = true;
    await form.Validate();

    if (form.IsValid)
    {
      try
      {
        bool success = await UserState.UpdateProfileSettingsAsync(editParameters);

        if (success)
        {
          _isEditing = false;
          // Reload user data to refresh the UI with the latest values from the server
          await PopulateFromCurrentUser();
          Snackbar.Add("Profile updated successfully!", Severity.Success);
        }
        else
        {
          Snackbar.Add("Failed to update profile.", Severity.Error);
        }
      }
      catch (Exception ex)
      {
        Snackbar.Add($"Error updating profile: {ex.Message}", Severity.Error);
      }
    }
    else
    {
      Snackbar.Add("Please correct validation errors.", Severity.Warning);
    }

    LoadingService.IsLoading = false;
  }

  private void CancelEdit()
  {
    editParameters = new UserUpdate(originalParameters);
    _isEditing = false;
    StateHasChanged();
  }
}
