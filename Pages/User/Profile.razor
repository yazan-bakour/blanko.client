@page "/profile"

@using System
@using Banko.Client.Models.User
@using Banko.Client.Services
@using Banko.Client.Services.User
@using Microsoft.AspNetCore.Authorization
@using Banko.Client.Pages.User.settings
@using System.Globalization
@using Banko.Client.Components

@inject UserStateService UserState
@inject ISnackbar Snackbar
@inject LoadingService LoadingService

@attribute [Authorize]

<PageTitle>Profile</PageTitle>

<MudItem xs="12" Class="d-flex justify-content-start mb-3">
  @if (_isEditing)
  {
    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="HandleSaveAsync" Class="mr-2"
      Disabled="LoadingService.IsLoading">Save Changes</MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="CancelEdit" Disabled="LoadingService.IsLoading">
      Cancel</MudButton>
  }
  else
  {
    <MudButton DropShadow="false" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.EditNote"
      OnClick="StartEdit">Edit</MudButton>
  }
</MudItem>

<MudCard Elevation="25" Class="pa-7 w-100">
  <MudForm Model="@editParameters" @ref="form" ValidationDelay="0" @bind-IsValid="@isSuccess">
    <MudGrid Spacing="0">
      <MudGrid Spacing="0">

        <MudItem xs="12">
          <MudGrid Spacing="0">
            <MudItem xs="6" Class="d-flex flex-column">
              <MudText Typo="Typo.h4" Color="Color.Primary" Class="mt-1 mud-width-full">
                @editParameters.FullName
              </MudText>
              <MudText Typo="Typo.body1" Color="Color.Primary" Class="mt-1 mud-width-full">
                @editParameters.UniqueId
              </MudText>
              <MudText Typo="Typo.caption" Class="mt-1">Joined:
                @(editParameters.CreatedAt?.ToLocalTime().ToString("MMMM dd, yyyy HH:mm") ?? "N/A")
              </MudText>
            </MudItem>

            <MudItem xs="6" Class="d-flex justify-end">
              <ImageSettings IsEditing="_isEditing" UserData="editParameters" OnImageUpdated="HandleImageUpdated" />
            </MudItem>
          </MudGrid>
        </MudItem>

        <MudItem xs="12">
          <MudText Typo="Typo.h6" Class="mb-3">Account Information</MudText>

          <MudTextField Label="Email" @bind-Value="editParameters.Email" ReadOnly="true" Variant="Variant.Text"
            FullWidth Class="mb-3" />
          <MudTextField Label="Role" @bind-Value="editParameters.Role" ReadOnly="true" Variant="Variant.Text" FullWidth
            Class="mb-3" />

          <MudText Typo="Typo.h6" Class="mt-4 mb-3 mt-10">Personal Details</MudText>
          <MudTextField Label="First Name" @bind-Value="editParameters.FirstName" Disabled="!_isEditing"
            Variant="Variant.Filled" Class="mb-3" Required />
          <MudTextField Label="Last Name" @bind-Value="editParameters.LastName" Disabled="!_isEditing"
            Variant="Variant.Filled" Class="mb-3" Required />

          <MudTextField Label="Password" @bind-Value="editParameters.NewPassword" Disabled="!_isEditing"
            InputType="@(_passwordVisible? InputType.Text: InputType.Password)" Adornment="Adornment.End"
            AdornmentIcon="@(_passwordVisible? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
            OnAdornmentClick="() => _passwordVisible = !_passwordVisible" Variant="Variant.Filled" Class="mb-3"
            Immediate="true" />

          <MudDatePicker Class="mb-3" Label="Date of Birth" Editable="true" Disabled="!_isEditing"
            Variant="Variant.Filled" Placeholder="Select Date of Birth" DateFormat="dd.MM.yyyy"
            @bind-Date="editParameters.DateOfBirth" Mask="@(new DateMask("dd.MM.yyyy"))"
            PickerVariant="PickerVariant.Dialog" />



          @* <MudTextField Label="Gender" @bind-Value="editParameters.Gender" Disabled="!_isEditing"
            Variant="Variant.Filled" FullWidth Class="mb-3" /> *@

          <MudSelect T="UserGender ?" Label="Gender" @bind-Value="editParameters.Gender" Disabled="!_isEditing"
            Variant="Variant.Filled" FullWidth Class="mb-3" Placeholder="Select Gender">
            <MudSelectItem T="UserGender ?" Value="@(UserGender.Male)">Male</MudSelectItem>
            <MudSelectItem T="UserGender ?" Value="@(UserGender.Female)">Female</MudSelectItem>
          </MudSelect>

          <MudTextField Label="Nationality" @bind-Value="editParameters.Nationality" Disabled="!_isEditing"
            Variant="Variant.Filled" FullWidth Class="mb-3" />

          <MudText Typo="Typo.h6" Class="mt-4 mb-3 mt-10">Contact Information</MudText>
          <MudTextField Label="Phone Number" @bind-Value="editParameters.PhoneNumber" Disabled="!_isEditing"
            Variant="Variant.Filled" FullWidth Class="mb-3" />
          <MudTextField Label="Address" @bind-Value="editParameters.Address" Disabled="!_isEditing"
            Variant="Variant.Filled" FullWidth Class="mb-3" />
          <MudTextField Label="City" @bind-Value="editParameters.City" Disabled="!_isEditing" Variant="Variant.Filled"
            FullWidth Class="mb-3" />
          <MudTextField Label="State" @bind-Value="editParameters.State" Disabled="!_isEditing" Variant="Variant.Filled"
            FullWidth Class="mb-3" />
          <MudTextField Label="Zip Code" @bind-Value="editParameters.ZipCode" Disabled="!_isEditing"
            Variant="Variant.Filled" FullWidth Class="mb-3" />
          <MudTextField Label="Country" @bind-Value="editParameters.Country" Disabled="!_isEditing"
            Variant="Variant.Filled" FullWidth Class="mb-3" />

          <MudItem xs="12" Class="d-flex justify-end mt-4">
            @if (_isEditing)
            {
              <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="HandleSaveAsync" Class="mr-2"
                Disabled="LoadingService.IsLoading">Save Changes</MudButton>
              <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="CancelEdit"
                Disabled="LoadingService.IsLoading">Cancel</MudButton>
            }
            else
            {
              <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartEdit">Edit Profile</MudButton>
            }
          </MudItem>
        </MudItem>
      </MudGrid>
    </MudGrid>
  </MudForm>
</MudCard>


@code {
  private UserUpdate editParameters = new UserUpdate();
  private UserUpdate originalParameters = new UserUpdate();
  private bool _isEditing = false;
  private MudForm? form;
  private bool isSuccess = false;
  private bool _passwordVisible = false;

  protected override async Task OnInitializedAsync()
  {
    // When UserState changes, update our local copy if we're not in edit mode
    if (!_isEditing && UserState.CurrentUser != null)
    {
      await PopulateFromCurrentUser();
      StateHasChanged();
    }
  }
  private void HandleLoadError(Exception ex)
  {
    // Handle load error - perhaps show a more specific error or retry option
    Snackbar.Add($"Failed to load profile data: {ex.Message}", Severity.Error);
  }

  private async Task PopulateFromCurrentUser()
  {
    await UserState.LoadUserDataAsync();
    var user = UserState.CurrentUser?.User;
    if (user == null) return;

    // Create a new UserUpdate instance and populate from UserRead
    editParameters = new UserUpdate
    {
      Id = user.Id,
      Email = user.Email,
      Role = user.Role,
      FullName = user.FullName,
      FirstName = user.FirstName,
      LastName = user.LastName,
      PhoneNumber = user.PhoneNumber,
      Address = user.Address,
      City = user.City,
      State = user.State,
      ZipCode = user.ZipCode,
      Country = user.Country,
      DateOfBirth = user.DateOfBirth,
      Nationality = user.Nationality,
      Gender = user.Gender,
      UniqueId = user.UniqueId,
      CreatedAt = user.CreatedAt,
      ProfilePictureDisplay = user.ProfilePictureDisplay,
      ProfilePictureUrl = user.ProfilePictureDisplay?.StartsWith("http") == true ?
    user.ProfilePictureDisplay : null,
      ProfilePictureFile = null
    };

    // Create a backup for cancel operations
    originalParameters = new UserUpdate(editParameters);
  }

  private void HandleImageUpdated(UserImageUploadResults updateResult)
  {
    if (updateResult != null && !string.IsNullOrEmpty(updateResult.ImageData))
    {
      // Update the display image immediately
      editParameters.ProfilePictureDisplay = updateResult.ImageData;

      // Update the source property based on where the image came from
      if (updateResult.ImageSource == ImageSource.Url)
      {
        editParameters.ProfilePictureUrl = updateResult.ImageData;
        editParameters.ProfilePictureFile = null;
      }
      else // File
      {
        editParameters.ProfilePictureFile = updateResult.ImageData;
        editParameters.ProfilePictureUrl = null;
      }
    }
    StateHasChanged();
  }

  private void StartEdit()
  {
    originalParameters = new UserUpdate(editParameters);
    _isEditing = true;
  }
  private async Task HandleSaveAsync()
  {
    if (form == null) return;

    LoadingService.IsLoading = true;
    await form.Validate();

    if (form.IsValid)
    {
      try
      {
        bool success = await UserState.UpdateProfileSettingsAsync(editParameters);

        if (success)
        {
          _isEditing = false;
          // Reload user data to refresh the UI with the latest values from the server
          await PopulateFromCurrentUser();
          Snackbar.Add("Profile updated successfully!", Severity.Success);
        }
        else
        {
          Snackbar.Add("Failed to update profile.", Severity.Error);
        }
      }
      catch (Exception ex)
      {
        Snackbar.Add($"Error updating profile: {ex.Message}", Severity.Error);
      }
    }
    else
    {
      Snackbar.Add("Please correct validation errors.", Severity.Warning);
    }

    LoadingService.IsLoading = false;
  }

  private void CancelEdit()
  {
    editParameters = new UserUpdate(originalParameters);
    _isEditing = false;
    StateHasChanged();
  }
}
