@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using Banko.Client.Models.User

<MudDialog>
  <TitleContent>
    <MudText Typo="Typo.h6">Update Profile Picture</MudText>
  </TitleContent>
  <DialogContent>
    <MudTabs Elevation="2" Rounded="true" Centered="true" PanelClass="mt-4">
      <MudTabPanel Text="From URL">
        <MudTextField @bind-Value="imageUrl" Label="Image URL" Variant="Variant.Outlined" Class="mt-3"
          HelperText="Enter the direct URL of the image." />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ApplyUrl" Class="mt-3"
          Disabled="string.IsNullOrWhiteSpace(imageUrl)">Set Image from URL</MudButton>
      </MudTabPanel>
      <MudTabPanel Text="Upload File">
        <MudFileUpload T="IBrowserFile" FilesChanged="OnFileSelected" Accept=".png,.jpg,.jpeg,.gif" MaximumFileCount="1"
          Class="mt-3">
          @* <InputFile OnChange="HandleInputFileChange" accept=".png,.jpg,.jpeg,.gif" id="fileInput"
            style="display:none" />
          <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.CloudUpload" for="fileInput">
            Choose File
          </MudButton> *@
        </MudFileUpload>
        @if (selectedFile != null)
        {
          <MudText Class="mt-2">Selected: @selectedFile.Name (@FormatBytes(selectedFile.Size))</MudText>
          <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="UploadAndSetFile" Class="mt-2"
            Disabled="isUploading">
            @if (isUploading)
            {
              <MudProgressCircular Indeterminate="true" Size="Size.Small" />
              <MudText Class="ml-2">Uploading...</MudText>
            }
            else
            {
              <MudText>Use This Image</MudText>
            }
          </MudButton>
        }
        @if (!string.IsNullOrWhiteSpace(uploadError))
        {
          <MudAlert Severity="Severity.Error" Class="mt-2">@uploadError</MudAlert>
        }
      </MudTabPanel>
    </MudTabs>
  </DialogContent>
  <DialogActions>
    <MudButton OnClick="Cancel">Cancel</MudButton>
  </DialogActions>
</MudDialog>

@code {
  [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public string CurrentImageUrl { get; set; } = string.Empty;

  private string imageUrl = string.Empty;
  private IBrowserFile? selectedFile;
  private bool isUploading = false;
  private string? uploadError = null;
  private const long MaxFileSize = 2 * 1024 * 1024; // 2MB

  protected override void OnInitialized()
  {
    imageUrl = CurrentImageUrl;
  }

  private void ApplyUrl()
  {
    if (Uri.TryCreate(imageUrl, UriKind.Absolute, out var uriResult)
    && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
    {
      MudDialog.Close(DialogResult.Ok(new UserImageUploadResults { IsUrl = true, Data = imageUrl }));
    }
    else
    {
      uploadError = "Invalid URL format. Please enter a valid HTTP/HTTPS URL.";
    }
  }

  private void HandleInputFileChange(InputFileChangeEventArgs e)
  {
    if (e.FileCount > 0)
    {
      var file = e.File;
      OnFileSelected(file);
    }
  }

  private void OnFileSelected(IBrowserFile file)
  {
    selectedFile = file;
    uploadError = null;
    StateHasChanged();
  }

  private async Task UploadAndSetFile()
  {
    if (selectedFile == null) return;

    isUploading = true;
    uploadError = null;
    StateHasChanged();

    try
    {
      if (selectedFile.Size > MaxFileSize)
      {
        uploadError = $"File size exceeds {FormatBytes(MaxFileSize)} limit.";
        isUploading = false;
        return;
      }

      await using var memoryStream = new MemoryStream();
      await selectedFile.OpenReadStream(MaxFileSize).CopyToAsync(memoryStream);
      var base64String = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";

      MudDialog.Close(DialogResult.Ok(new UserImageUploadResults { IsUrl = false, Data = base64String }));
    }
    catch (Exception ex)
    {
      uploadError = $"Error processing file: {ex.Message}";
    }
    finally
    {
      isUploading = false;
      StateHasChanged();
    }
  }

  private void Cancel() => MudDialog.Cancel();

  private static string FormatBytes(long bytes)
  {
    string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
    int i = 0;
    double dblSByte = bytes;
    if (bytes > 0) // Check to prevent division by zero or incorrect loop for 0 bytes
    {
      for (i = 0; (bytes / 1024) > 0 && i < suffixes.Length - 1; i++, bytes /= 1024)
        dblSByte = bytes / 1024.0;
    }
    else
    {
      dblSByte = 0; // Handle 0 bytes case
    }
    return $"{dblSByte:0.##} {suffixes[i]}";
  }
}
