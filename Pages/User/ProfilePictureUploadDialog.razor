@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using Banko.Client.Models.User
@using Banko.Client.Helper
@using System.IO.Compression;

<MudDialog>
  <TitleContent>
    <MudText Typo="Typo.h6">Update Profile Picture</MudText>
  </TitleContent>
  <DialogContent>
    <div Class="dialog-height">
      <MudTabs Rounded="true" Centered="true" PanelClass="mt-4">
        <MudTabPanel Text="From URL">
          <MudTextField @bind-Value="imageUrl" Label="Image URL" Variant="Variant.Outlined" Class="mt-3"
            Immediate="true" HelperText="Enter the direct URL of the image." />
          @if (!string.IsNullOrWhiteSpace(imageUrl))
          {
            <div class="d-flex justify-center mt-3">
              <MudImage Src="@imageUrl" Alt="Preview" Width="100" Height="100" ObjectFit="ObjectFit.Cover"
                Class="rounded" />
            </div>
          }
        </MudTabPanel>

        @* <MudTabPanel Text="Upload File">
                    <MudFileUpload T="IBrowserFile" Accept=".png,.jpg,.jpeg,.gif" FilesChanged="OnFileSelected" Class="mt-3"
                                   MaximumFileCount="1">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                Choose File
                            </MudButton>
                        </ActivatorContent>
                        <SelectedTemplate>
                            @if (selectedFile != null)
                            {
                                <MudText Typo="Typo.caption">@selectedFile.Name (@FormatBytes(selectedFile.Size))</MudText>
                            }
                            @if (uploadError != null)
                            {
                                <MudText Typo="Typo.caption" Color="Color.Error">@uploadError</MudText>
                            }
                        </SelectedTemplate>
                    </MudFileUpload>

                    @if (previewImageBase64 != null)
                    {
                        <div class="d-flex justify-center mt-3">
                            <MudImage Src="@previewImageBase64" Alt="Preview" Width="100" Height="100" ObjectFit="ObjectFit.Cover"
                                      Class="rounded" />
                        </div>
                    }
                </MudTabPanel> *@
      </MudTabs>
    </div>
  </DialogContent>
  <DialogActions>
    <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="CompleteSelection"
      Disabled="(string.IsNullOrWhiteSpace(imageUrl) && selectedFile == null) || isUploading">
      @if (isUploading)
      {
        <MudProgressCircular Indeterminate="true" Size="Size.Small" />
        <MudText Typo="Typo.caption" Class="ml-2">Processing...</MudText>
      }
      else
      {
        <MudText>Complete</MudText>
      }
    </MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Cancel">Cancel</MudButton>
  </DialogActions>
</MudDialog>

@code {
  [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public string CurrentImageUrl { get; set; } = string.Empty;

  private string imageUrl = string.Empty;
  private IBrowserFile? selectedFile;
  private bool isUploading = false;
  private string? uploadError = null;
  private string? previewImageBase64 = null;
  private const long MaxFileSize = 2 * 1024 * 1024;

  protected override void OnInitialized()
  {
    imageUrl = CurrentImageUrl;
  }

  private void CompleteSelection()
  {
    uploadError = null;

    if (!string.IsNullOrWhiteSpace(imageUrl))
    {
      if (Uri.TryCreate(imageUrl, UriKind.Absolute, out var uriResult)
      && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
      {
        MudDialog.Close(DialogResult.Ok(new UserImageUploadResults
        {
          ImageSource = ImageSource.Url,
          ImageData = imageUrl
        }));
      }
      else
      {
        uploadError = "Invalid URL format. Please enter a valid HTTP/HTTPS URL.";
        StateHasChanged();
      }
      return;
    }

    uploadError = "Please provide either an image URL or select a file.";
    StateHasChanged();
  }

  private void Cancel() => MudDialog.Cancel();
}

<style>
  .dialog-height {
    height: 290px;
  }
</style>
