@page "/"

@using Banko.Client.Models
@using Banko.Client.Services
@using Banko.Client.Services.User
@using Banko.Client.Services.Auth

@inject UserStateService UserState
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject LoadingService LoadingService

@implements IDisposable

<MudCard Elevation="25" Class="pa-4">
  <MudCardHeader Class="justify-center">
    <MudText Typo="Typo.h5" Align="Align.Center">Hello, @userName</MudText>
  </MudCardHeader>
  <MudCardContent>
    <MudText Typo="Typo.subtitle1" Align="Align.Center">Welcome to your new app.</MudText>
    @if (userName != "Guest")
    {
      <MudAlert Severity="Severity.Success" Class="mt-16">Your have successfully logged in.</MudAlert>
    }
    else
    {
      <MudAlert Severity="Severity.Info" Class="mt-16">Please Login or Register.</MudAlert>
    }
  </MudCardContent>
</MudCard>

@code {
  private string? userName;

  private UserData? user = null;

  protected override async Task OnInitializedAsync()
  {
    await LoadUserDataAsync();
  }
  private async Task LoadUserDataAsync()
  {
    try
    {
      LoadingService.IsLoading = true;
      await UserState.LoadUserDataAsync();
      userName = UserState.CurrentUser?.User.FullName ?? "Guest";
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error loading user data: {ex.Message}", Severity.Error);
    }
    finally
    {
      LoadingService.IsLoading = false;
      StateHasChanged();
    }
  }
  private void UpdateUI()
  {
    user = UserState.CurrentUser?.User;
    StateHasChanged();
  }
  public void Dispose()
  {
    UserState.OnUserStateChanged -= UpdateUI;
  }
}
