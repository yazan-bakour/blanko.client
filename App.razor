@using Banko.Client.Models.User
@using Banko.Client.Services.Auth
@using Banko.Client.Services.User
@using MudBlazor.Utilities
@using Banko.Client.Helper
@using Banko.Client.State

@inject UserStateService UserState
@inject LoadingService LoadingService
@inject AuthStateProvider AuthState
@inject LoadingService LoadingService

@* <BankoSnackbar /> *@

<CascadingAuthenticationState>
  <MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@IsDark" Theme="ThemeCustomColors.AppTheme" />
  <Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
      <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
        <NotAuthorized>
          <RedirectToLogin />
        </NotAuthorized>
        <Authorizing>
          <LoadingIndicator />
        </Authorizing>
      </AuthorizeRouteView>
      <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>

    <NotFound>
      <PageTitle>Not found</PageTitle>
      <LayoutView Layout="@typeof(MainLayout)">
        <p role="alert">Sorry, there's nothing at this address.</p>
      </LayoutView>
    </NotFound>
  </Router>
</CascadingAuthenticationState>

<MudPopoverProvider />
<MudDialogProvider  />
<MudSnackbarProvider />

@code {
  private bool IsDark {
    get => AuthState.UserPreferences.DarkMode;
    set {
      AuthState.UserPreferences.DarkMode = value;
    }
  }
  private MudThemeProvider? _mudThemeProvider;

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
    {
      AuthState.OnPreferencesChanged += OnPreferencesChanged;
    }
  }
  private void OnPreferencesChanged()
  {
    InvokeAsync(StateHasChanged);
  }
  public void Dispose()
  {
    AuthState.OnPreferencesChanged -= OnPreferencesChanged;
  }
}
<style>
  body {
    background-image: @(IsDark
        ? ThemeCustomColors.DarkGradientImage 
        : ThemeCustomColors.LightGradientImage);
  }

  body::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: @(IsDark 
        ? ThemeCustomColors.DarkGradientGlow 
        : ThemeCustomColors.LightGradientGlow);
    background-position: top right, bottom left, center center;
    background-size: 120% 120%, 120% 120%, 150% 150%;
    @* background-size: 40% 67%, 42% 112%, 193% 200%; *@
    background-repeat: no-repeat;
    opacity: 1;
    z-index: -1;
    pointer-events: none;
    animation: glow-shift 30s ease-in-out infinite alternate;
  }
</style>