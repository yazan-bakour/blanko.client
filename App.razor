@using Banko.Client.Models.User
@using Banko.Client.Services.User
@using MudBlazor.Utilities
@using Banko.Client.Helper

@inject UserStateService UserState
@inject LoadingService LoadingService
@inject AuthenticationStateProvider AuthStateProvider
@inject LoadingService LoadingService

<LoadingIndicator />
@* <BankoSnackbar /> *@

<CascadingAuthenticationState>

  <MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@IsDark" Theme="ThemeCustomColors.AppTheme" />

  <Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
      <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
        <NotAuthorized>
          <RedirectToLogin />
        </NotAuthorized>
        <Authorizing>
          <p>Checking authorization...</p>
        </Authorizing>
      </AuthorizeRouteView>
      <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>

    <NotFound>
      <PageTitle>Not found</PageTitle>
      <LayoutView Layout="@typeof(MainLayout)">
        <p role="alert">Sorry, there's nothing at this address.</p>
      </LayoutView>
    </NotFound>
  </Router>
</CascadingAuthenticationState>

<MudPopoverProvider />
<MudDialogProvider  />
<MudSnackbarProvider />

@code {
  private bool IsDark;
  private MudThemeProvider? _mudThemeProvider;
  protected override async Task OnInitializedAsync()
  {
    LoadingService.IsLoading = true;

    UserState.OnUserStateChanged += OnUserStateChanged;
    var authState = await AuthStateProvider.GetAuthenticationStateAsync();

    if (authState.User.Identity?.IsAuthenticated == true)
    {
      await UserState.LoadUserDataAsync();
      IsDark = UserState.Preference.Theme;
    }

    LoadingService.IsLoading = false;
  }

  private void OnUserStateChanged()
  {
    if (IsDark != UserState.Preference.Theme)
    {
      IsDark = UserState.Preference.Theme;
      InvokeAsync(StateHasChanged);
    }
  }

  public void Dispose()
  {
    UserState.OnUserStateChanged -= OnUserStateChanged;
  }
}
<style>
  body {
    background-image: @(IsDark
        ? ThemeCustomColors.DarkGradientImage 
        : ThemeCustomColors.LightGradientImage);
  }

  body::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: @(IsDark 
        ? ThemeCustomColors.DarkGradientGlow 
        : ThemeCustomColors.LightGradientGlow);
    background-position: top right, bottom left, center center;
    background-size: 120% 120%, 120% 120%, 150% 150%;
    @* background-size: 40% 67%, 42% 112%, 193% 200%; *@
    background-repeat: no-repeat;
    opacity: 1;
    z-index: -1;
    pointer-events: none;
    animation: glow-shift 30s ease-in-out infinite alternate;
  }
</style>