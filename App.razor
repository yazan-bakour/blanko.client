@using Banko.Client.Services.User

@inject UserStateService UserStateService
@inject LoadingService LoadingService

<LoadingIndicator />

<CascadingAuthenticationState>
  <Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
      <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
        <NotAuthorized>
          <RedirectToLogin />
        </NotAuthorized>
        <Authorizing>
          <p>Checking authorization...</p>
        </Authorizing>
      </AuthorizeRouteView>
      <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>

    <NotFound>
      <PageTitle>Not found</PageTitle>
      <LayoutView Layout="@typeof(MainLayout)">
        <p role="alert">Sorry, there's nothing at this address.</p>
      </LayoutView>
    </NotFound>
  </Router>
</CascadingAuthenticationState>

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="MyCustomTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
  private bool _isDarkMode;
  private MudThemeProvider? _mudThemeProvider;
  MudTheme MyCustomTheme = new MudTheme()
  {
    PaletteLight = new PaletteLight()
    {
      Primary = Colors.Blue.Default,
      Secondary = Colors.Green.Accent4,
      AppbarBackground = Colors.Red.Default,
    },
    PaletteDark = new PaletteDark()
    {
      Primary = Colors.LightBlue.Lighten5,
      Secondary = Colors.Indigo.Darken3,
      Dark = Colors.LightBlue.Darken4,
      Info = Colors.Blue.Accent1,
      AppbarBackground = Colors.Red.Lighten5,
      TextDisabled = Colors.Gray.Darken1,
      Surface = Colors.Indigo.Darken3,
      Background = Colors.Indigo.Darken4,


    },
    LayoutProperties = new LayoutProperties()
    {
      DrawerWidthLeft = "200px",
    }
  };

  protected override async Task OnInitializedAsync()
  {
    UserStateService.OnUserStateChanged += HandleUserStateChanged;
    @* await UserStateService.LoadUserDataAsync(); *@
    await SetDarkModeFromPreferencesAsync();
  }
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      if (UserStateService.CurrentUser?.User?.Preferences == null)
      {
        _isDarkMode = await _mudThemeProvider!.GetSystemPreference();
        StateHasChanged();
      }
    }
  }
  private async void HandleUserStateChanged()
  {
    await InvokeAsync(async () =>
    {
      await SetDarkModeFromPreferencesAsync();
      StateHasChanged();
    });
  }

  private async Task SetDarkModeFromPreferencesAsync()
  {
    bool darkModeToSet;
    var currentUser = UserStateService.CurrentUser;

    if (currentUser?.User?.Preferences != null &&
    currentUser.User.Preferences.TryGetValue("DarkMode", out var darkModeValueStr) &&
    bool.TryParse(darkModeValueStr, out var userPreference))
    {
      darkModeToSet = userPreference;
    }
    else
    {
      if (_mudThemeProvider != null)
      {
        darkModeToSet = await _mudThemeProvider.GetSystemPreference();
      }
      else
      {
        darkModeToSet = false;
      }
    }

    if (_isDarkMode != darkModeToSet)
    {
      _isDarkMode = darkModeToSet;
    }
  }

  public void Dispose()
  {
    UserStateService.OnUserStateChanged -= HandleUserStateChanged;
  }
}