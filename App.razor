@using Banko.Client.Models.User
@using Banko.Client.Services.User

@inject UserStateService UserState
@inject LoadingService LoadingService
@inject AuthenticationStateProvider AuthStateProvider
@inject LoadingService LoadingService

<LoadingIndicator />

<CascadingAuthenticationState>
  <Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
      <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
        <NotAuthorized>
          <RedirectToLogin />
        </NotAuthorized>
        <Authorizing>
          <p>Checking authorization...</p>
        </Authorizing>
      </AuthorizeRouteView>
      <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>

    <NotFound>
      <PageTitle>Not found</PageTitle>
      <LayoutView Layout="@typeof(MainLayout)">
        <p role="alert">Sorry, there's nothing at this address.</p>
      </LayoutView>
    </NotFound>
  </Router>
</CascadingAuthenticationState>

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@IsDark" Theme="MyCustomTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
  private bool IsDark;

  private MudThemeProvider? _mudThemeProvider;
  MudTheme MyCustomTheme = new MudTheme()
  {
    PaletteLight = new PaletteLight()
    {
      Primary = Colors.Blue.Default,
      Secondary = Colors.Green.Accent4,
      AppbarBackground = Colors.Red.Default,
    },
    PaletteDark = new PaletteDark()
    {
      Primary = Colors.LightBlue.Lighten5,
      Secondary = Colors.Indigo.Darken3,
      Dark = Colors.LightBlue.Darken4,
      Info = Colors.Blue.Accent1,
      AppbarBackground = Colors.Red.Lighten5,
      TextDisabled = Colors.Gray.Darken1,
      Surface = Colors.Indigo.Darken3,
      Background = Colors.Indigo.Darken4,
    },
    LayoutProperties = new LayoutProperties()
    {
      DrawerWidthLeft = "200px",
    }
  };
  protected override async Task OnInitializedAsync()
  {
    LoadingService.IsLoading = true;
    var authState = await AuthStateProvider.GetAuthenticationStateAsync();
    if (authState.User.Identity?.IsAuthenticated == true)
    {
      await UserState.LoadUserDataAsync();
      IsDark = UserState.Preference.Theme;
    }
    LoadingService.IsLoading = false;
    UserState.OnUserStateChanged += OnUserStateChanged;
  }

  private void OnUserStateChanged()
  {
    IsDark = UserState.Preference.Theme;
    StateHasChanged();
  }

  public void Dispose()
  {
    UserState.OnUserStateChanged -= OnUserStateChanged;
  }
}