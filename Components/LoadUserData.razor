@using Banko.Client.Models.User
@using Banko.Client.Services.User

@inject ISnackbar Snackbar
@inject UserStateService UserState
@inject LoadingService LoadingService

@ChildContent

@code {
  [Parameter] public RenderFragment ChildContent { get; set; } = default!;
  [Parameter] public EventCallback<UserRead> OnDataLoaded { get; set; }
  [Parameter] public EventCallback<Exception> OnLoadError { get; set; }
  [Parameter] public bool AutoLoad { get; set; } = true;
  [Parameter] public bool ForceRefresh { get; set; } = false;

  protected override async Task OnInitializedAsync()
  {
    // Subscribe to user state changes
    UserState.OnUserStateChanged += HandleUserStateChanged;

    if (AutoLoad)
    {
      await LoadUserDataAsync();
    }
  }

  public async Task LoadUserDataAsync()
  {
    try
    {
      LoadingService.IsLoading = true;

      await UserState.LoadUserDataAsync();

      if (UserState.CurrentUser != null)
      {
        // Call the parent's callback with the loaded data
        await OnDataLoaded.InvokeAsync(UserState.CurrentUser);
      }
      else
      {
        Snackbar.Add("Could not load user profile data.", Severity.Error);
        await OnLoadError.InvokeAsync(new Exception("User data is null after loading"));
      }
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error loading profile: {ex.Message}", Severity.Error);
      await OnLoadError.InvokeAsync(ex);
    }
    finally
    {
      LoadingService.IsLoading = false;
    }
  }

  private async void HandleUserStateChanged()
  {
    // When UserState changes, notify the parent component
    if (UserState.CurrentUser != null)
    {
      await OnDataLoaded.InvokeAsync(UserState.CurrentUser);
    }
  }

  public void Dispose()
  {
    // Unsubscribe when component is disposed
    UserState.OnUserStateChanged -= HandleUserStateChanged;
  }
}